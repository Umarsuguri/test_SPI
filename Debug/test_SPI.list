
test_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006998  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006c44  08006c44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c44  08006c44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd0  20000074  08006cc0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d44  08006cc0  00021d44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160f9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359c  00000000  00000000  00036196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019361  00000000  00000000  0003b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f1a  00000000  00000000  00054b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d30e  00000000  00000000  00069a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6da9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047dc  00000000  00000000  000f6dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a90 	.word	0x08006a90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006a90 	.word	0x08006a90

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b18      	ldr	r3, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a17      	ldr	r2, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200c      	movs	r0, #12
 8000174:	f000 fd9f 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000178:	200c      	movs	r0, #12
 800017a:	f000 fdb8 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200d      	movs	r0, #13
 8000184:	f000 fd97 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000188:	200d      	movs	r0, #13
 800018a:	f000 fdb0 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 fd8f 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 fda8 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 fd87 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 fda0 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <HAL_UART_RxCpltCallback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(uart_RX_Handle, 0x01);
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <HAL_UART_RxCpltCallback+0x1c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2101      	movs	r1, #1
 80001ca:	4618      	mov	r0, r3
 80001cc:	f003 fc0c 	bl	80039e8 <osEventFlagsSet>
}
 80001d0:	bf00      	nop
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	20000170 	.word	0x20000170

080001dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(uart_TX_Handle, 0x01);
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <HAL_UART_TxCpltCallback+0x1c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2101      	movs	r1, #1
 80001ea:	4618      	mov	r0, r3
 80001ec:	f003 fbfc 	bl	80039e8 <osEventFlagsSet>
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000174 	.word	0x20000174

080001fc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *huart)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(spi_RX_Handle, 0x01);
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_SPI_RxCpltCallback+0x1c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2101      	movs	r1, #1
 800020a:	4618      	mov	r0, r3
 800020c:	f003 fbec 	bl	80039e8 <osEventFlagsSet>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20000178 	.word	0x20000178

0800021c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *huart)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(spi_TX_Handle, 0x01);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <HAL_SPI_TxCpltCallback+0x1c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2101      	movs	r1, #1
 800022a:	4618      	mov	r0, r3
 800022c:	f003 fbdc 	bl	80039e8 <osEventFlagsSet>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000017c 	.word	0x2000017c

0800023c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <MX_FREERTOS_Init+0x68>)
 8000242:	2100      	movs	r1, #0
 8000244:	4818      	ldr	r0, [pc, #96]	; (80002a8 <MX_FREERTOS_Init+0x6c>)
 8000246:	f003 faa5 	bl	8003794 <osThreadNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <MX_FREERTOS_Init+0x70>)
 800024e:	6013      	str	r3, [r2, #0]

  /* creation of UART_comm */
  UART_commHandle = osThreadNew(UART_communication, NULL, &UART_comm_attributes);
 8000250:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <MX_FREERTOS_Init+0x74>)
 8000252:	2100      	movs	r1, #0
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <MX_FREERTOS_Init+0x78>)
 8000256:	f003 fa9d 	bl	8003794 <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a16      	ldr	r2, [pc, #88]	; (80002b8 <MX_FREERTOS_Init+0x7c>)
 800025e:	6013      	str	r3, [r2, #0]

  /* creation of SPI_comm */
  SPI_commHandle = osThreadNew(SPI_communication, NULL, &SPI_comm_attributes);
 8000260:	4a16      	ldr	r2, [pc, #88]	; (80002bc <MX_FREERTOS_Init+0x80>)
 8000262:	2100      	movs	r1, #0
 8000264:	4816      	ldr	r0, [pc, #88]	; (80002c0 <MX_FREERTOS_Init+0x84>)
 8000266:	f003 fa95 	bl	8003794 <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <MX_FREERTOS_Init+0x88>)
 800026e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of uart_RX_ */
  uart_RX_Handle = osEventFlagsNew(&uart_RX__attributes);
 8000270:	4815      	ldr	r0, [pc, #84]	; (80002c8 <MX_FREERTOS_Init+0x8c>)
 8000272:	f003 fb67 	bl	8003944 <osEventFlagsNew>
 8000276:	4603      	mov	r3, r0
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <MX_FREERTOS_Init+0x90>)
 800027a:	6013      	str	r3, [r2, #0]

  /* creation of uart_TX_ */
  uart_TX_Handle = osEventFlagsNew(&uart_TX__attributes);
 800027c:	4814      	ldr	r0, [pc, #80]	; (80002d0 <MX_FREERTOS_Init+0x94>)
 800027e:	f003 fb61 	bl	8003944 <osEventFlagsNew>
 8000282:	4603      	mov	r3, r0
 8000284:	4a13      	ldr	r2, [pc, #76]	; (80002d4 <MX_FREERTOS_Init+0x98>)
 8000286:	6013      	str	r3, [r2, #0]

  /* creation of spi_RX_ */
  spi_RX_Handle = osEventFlagsNew(&spi_RX__attributes);
 8000288:	4813      	ldr	r0, [pc, #76]	; (80002d8 <MX_FREERTOS_Init+0x9c>)
 800028a:	f003 fb5b 	bl	8003944 <osEventFlagsNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <MX_FREERTOS_Init+0xa0>)
 8000292:	6013      	str	r3, [r2, #0]

  /* creation of spi_TX_ */
  spi_TX_Handle = osEventFlagsNew(&spi_TX__attributes);
 8000294:	4812      	ldr	r0, [pc, #72]	; (80002e0 <MX_FREERTOS_Init+0xa4>)
 8000296:	f003 fb55 	bl	8003944 <osEventFlagsNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <MX_FREERTOS_Init+0xa8>)
 800029e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08006b0c 	.word	0x08006b0c
 80002a8:	080002e9 	.word	0x080002e9
 80002ac:	20000164 	.word	0x20000164
 80002b0:	08006b30 	.word	0x08006b30
 80002b4:	080002f9 	.word	0x080002f9
 80002b8:	20000168 	.word	0x20000168
 80002bc:	08006b54 	.word	0x08006b54
 80002c0:	080003a5 	.word	0x080003a5
 80002c4:	2000016c 	.word	0x2000016c
 80002c8:	08006b78 	.word	0x08006b78
 80002cc:	20000170 	.word	0x20000170
 80002d0:	08006b88 	.word	0x08006b88
 80002d4:	20000174 	.word	0x20000174
 80002d8:	08006b98 	.word	0x08006b98
 80002dc:	20000178 	.word	0x20000178
 80002e0:	08006ba8 	.word	0x08006ba8
 80002e4:	2000017c 	.word	0x2000017c

080002e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f003 faf9 	bl	80038e8 <osDelay>
 80002f6:	e7fb      	b.n	80002f0 <StartDefaultTask+0x8>

080002f8 <UART_communication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_communication */
void UART_communication(void *argument)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_communication */
	HAL_SPI_Receive_DMA(&hspi1,spi_rx_data,2);
 8000300:	2202      	movs	r2, #2
 8000302:	4920      	ldr	r1, [pc, #128]	; (8000384 <UART_communication+0x8c>)
 8000304:	4820      	ldr	r0, [pc, #128]	; (8000388 <UART_communication+0x90>)
 8000306:	f002 f8af 	bl	8002468 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(spi_RX_Handle, 0x01, osFlagsWaitAny, osWaitForever);
 800030a:	4b20      	ldr	r3, [pc, #128]	; (800038c <UART_communication+0x94>)
 800030c:	6818      	ldr	r0, [r3, #0]
 800030e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000312:	2200      	movs	r2, #0
 8000314:	2101      	movs	r1, #1
 8000316:	f003 fbbf 	bl	8003a98 <osEventFlagsWait>


	while(spi_rx_data[0]!= 0U){
 800031a:	e019      	b.n	8000350 <UART_communication+0x58>
		spi_to_uart[uart_to_spi_lenght] = uart_rx_data[0];
 800031c:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <UART_communication+0x98>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <UART_communication+0x9c>)
 8000324:	7819      	ldrb	r1, [r3, #0]
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <UART_communication+0xa0>)
 8000328:	5499      	strb	r1, [r3, r2]
		spi_to_uart[uart_to_spi_lenght+1] = uart_rx_data[1];
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <UART_communication+0x98>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	4a18      	ldr	r2, [pc, #96]	; (8000394 <UART_communication+0x9c>)
 8000332:	7851      	ldrb	r1, [r2, #1]
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <UART_communication+0xa0>)
 8000336:	54d1      	strb	r1, [r2, r3]
		HAL_SPI_Receive(&hspi1,spi_rx_data,2,50);
 8000338:	2332      	movs	r3, #50	; 0x32
 800033a:	2202      	movs	r2, #2
 800033c:	4911      	ldr	r1, [pc, #68]	; (8000384 <UART_communication+0x8c>)
 800033e:	4812      	ldr	r0, [pc, #72]	; (8000388 <UART_communication+0x90>)
 8000340:	f001 fd18 	bl	8001d74 <HAL_SPI_Receive>
		spi_to_uart_lenght+=2;
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <UART_communication+0xa4>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	3302      	adds	r3, #2
 800034a:	b2da      	uxtb	r2, r3
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <UART_communication+0xa4>)
 800034e:	701a      	strb	r2, [r3, #0]
	while(spi_rx_data[0]!= 0U){
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <UART_communication+0x8c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d1e1      	bne.n	800031c <UART_communication+0x24>
	}

	if (spi_to_uart_lenght != 0) {
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <UART_communication+0xa4>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d00a      	beq.n	8000376 <UART_communication+0x7e>
		HAL_UART_Transmit_DMA(&huart2,spi_to_uart,spi_to_uart_lenght);
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <UART_communication+0xa4>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	b29b      	uxth	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	490b      	ldr	r1, [pc, #44]	; (8000398 <UART_communication+0xa0>)
 800036a:	480d      	ldr	r0, [pc, #52]	; (80003a0 <UART_communication+0xa8>)
 800036c:	f002 fd78 	bl	8002e60 <HAL_UART_Transmit_DMA>
		spi_to_uart_lenght = 0;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <UART_communication+0xa4>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
	}


	HAL_SPI_Receive_DMA(&hspi1,spi_rx_data,1);
 8000376:	2201      	movs	r2, #1
 8000378:	4902      	ldr	r1, [pc, #8]	; (8000384 <UART_communication+0x8c>)
 800037a:	4803      	ldr	r0, [pc, #12]	; (8000388 <UART_communication+0x90>)
 800037c:	f002 f874 	bl	8002468 <HAL_SPI_Receive_DMA>
	osEventFlagsWait(spi_RX_Handle, 0x01, osFlagsWaitAny, osWaitForever);
 8000380:	e7c3      	b.n	800030a <UART_communication+0x12>
 8000382:	bf00      	nop
 8000384:	20000094 	.word	0x20000094
 8000388:	20000180 	.word	0x20000180
 800038c:	20000178 	.word	0x20000178
 8000390:	20000160 	.word	0x20000160
 8000394:	20000090 	.word	0x20000090
 8000398:	200000fc 	.word	0x200000fc
 800039c:	20000161 	.word	0x20000161
 80003a0:	20000260 	.word	0x20000260

080003a4 <SPI_communication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SPI_communication */
void SPI_communication(void *argument)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI_communication */
  HAL_UART_Receive_DMA(&huart2,uart_to_spi,1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	491c      	ldr	r1, [pc, #112]	; (8000420 <SPI_communication+0x7c>)
 80003b0:	481c      	ldr	r0, [pc, #112]	; (8000424 <SPI_communication+0x80>)
 80003b2:	f002 fdc5 	bl	8002f40 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
    osEventFlagsWait(uart_RX_Handle, 0x01, osFlagsWaitAny, osWaitForever);
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <SPI_communication+0x84>)
 80003b8:	6818      	ldr	r0, [r3, #0]
 80003ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003be:	2200      	movs	r2, #0
 80003c0:	2101      	movs	r1, #1
 80003c2:	f003 fb69 	bl	8003a98 <osEventFlagsWait>

    while(uart_rx_data[0]!= '\0'){
 80003c6:	e012      	b.n	80003ee <SPI_communication+0x4a>
		uart_to_spi[uart_to_spi_lenght] = uart_rx_data[0];
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <SPI_communication+0x88>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	461a      	mov	r2, r3
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <SPI_communication+0x8c>)
 80003d0:	7819      	ldrb	r1, [r3, #0]
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <SPI_communication+0x7c>)
 80003d4:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive(&huart2,uart_rx_data,1,50);
 80003d6:	2332      	movs	r3, #50	; 0x32
 80003d8:	2201      	movs	r2, #1
 80003da:	4915      	ldr	r1, [pc, #84]	; (8000430 <SPI_communication+0x8c>)
 80003dc:	4811      	ldr	r0, [pc, #68]	; (8000424 <SPI_communication+0x80>)
 80003de:	f002 fcad 	bl	8002d3c <HAL_UART_Receive>
		uart_to_spi_lenght++;
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <SPI_communication+0x88>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	3301      	adds	r3, #1
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <SPI_communication+0x88>)
 80003ec:	701a      	strb	r2, [r3, #0]
    while(uart_rx_data[0]!= '\0'){
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <SPI_communication+0x8c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e8      	bne.n	80003c8 <SPI_communication+0x24>
	}

    if (uart_to_spi_lenght != 0) {
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <SPI_communication+0x88>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00a      	beq.n	8000414 <SPI_communication+0x70>
    	HAL_SPI_Transmit_DMA(&hspi1,uart_to_spi,uart_to_spi_lenght);
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <SPI_communication+0x88>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	b29b      	uxth	r3, r3
 8000404:	461a      	mov	r2, r3
 8000406:	4906      	ldr	r1, [pc, #24]	; (8000420 <SPI_communication+0x7c>)
 8000408:	480a      	ldr	r0, [pc, #40]	; (8000434 <SPI_communication+0x90>)
 800040a:	f001 ff7b 	bl	8002304 <HAL_SPI_Transmit_DMA>
    	uart_to_spi_lenght = 0;
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <SPI_communication+0x88>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
    }


    HAL_UART_Receive_DMA(&huart2,uart_rx_data,1);
 8000414:	2201      	movs	r2, #1
 8000416:	4906      	ldr	r1, [pc, #24]	; (8000430 <SPI_communication+0x8c>)
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <SPI_communication+0x80>)
 800041a:	f002 fd91 	bl	8002f40 <HAL_UART_Receive_DMA>
    osEventFlagsWait(uart_RX_Handle, 0x01, osFlagsWaitAny, osWaitForever);
 800041e:	e7ca      	b.n	80003b6 <SPI_communication+0x12>
 8000420:	20000098 	.word	0x20000098
 8000424:	20000260 	.word	0x20000260
 8000428:	20000170 	.word	0x20000170
 800042c:	20000160 	.word	0x20000160
 8000430:	20000090 	.word	0x20000090
 8000434:	20000180 	.word	0x20000180

08000438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <MX_GPIO_Init+0x90>)
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0320 	and.w	r3, r3, #32
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a17      	ldr	r2, [pc, #92]	; (80004c8 <MX_GPIO_Init+0x90>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_GPIO_Init+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_GPIO_Init+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <MX_GPIO_Init+0x90>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_GPIO_Init+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0308 	and.w	r3, r3, #8
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_GPIO_Init+0x94>)
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	4809      	ldr	r0, [pc, #36]	; (80004d0 <MX_GPIO_Init+0x98>)
 80004aa:	f000 fe29 	bl	8001100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2105      	movs	r1, #5
 80004b2:	2017      	movs	r0, #23
 80004b4:	f000 fbff 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004b8:	2017      	movs	r0, #23
 80004ba:	f000 fc18 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	10110000 	.word	0x10110000
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fab4 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80f 	bl	80004fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f7ff ffaa 	bl	8000438 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e4:	f7ff fe34 	bl	8000150 <MX_DMA_Init>
  MX_SPI1_Init();
 80004e8:	f000 f854 	bl	8000594 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f9bc 	bl	8000868 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80004f0:	f003 f8ea 	bl	80036c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80004f4:	f7ff fea2 	bl	800023c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004f8:	f003 f918 	bl	800372c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x28>

080004fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b090      	sub	sp, #64	; 0x40
 8000502:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	2228      	movs	r2, #40	; 0x28
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f006 f9f9 	bl	8006904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000520:	2301      	movs	r3, #1
 8000522:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000528:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800053c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000540:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	4618      	mov	r0, r3
 8000548:	f000 ff80 	bl	800144c <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000552:	f000 f819 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	2302      	movs	r3, #2
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f001 f9ed 	bl	8001950 <HAL_RCC_ClockConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800057c:	f000 f804 	bl	8000588 <Error_Handler>
  }
}
 8000580:	bf00      	nop
 8000582:	3740      	adds	r7, #64	; 0x40
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	e7fe      	b.n	8000590 <Error_Handler+0x8>
	...

08000594 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <MX_SPI1_Init+0x68>)
 800059a:	4a19      	ldr	r2, [pc, #100]	; (8000600 <MX_SPI1_Init+0x6c>)
 800059c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_SPI1_Init+0x68>)
 80005a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_SPI1_Init+0x68>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_SPI1_Init+0x68>)
 80005ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_SPI1_Init+0x68>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_SPI1_Init+0x68>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_SPI1_Init+0x68>)
 80005c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_SPI1_Init+0x68>)
 80005ca:	2208      	movs	r2, #8
 80005cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_SPI1_Init+0x68>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_SPI1_Init+0x68>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_SPI1_Init+0x68>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_SPI1_Init+0x68>)
 80005e2:	220a      	movs	r2, #10
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_SPI1_Init+0x68>)
 80005e8:	f001 fb40 	bl	8001c6c <HAL_SPI_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80005f2:	f7ff ffc9 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000180 	.word	0x20000180
 8000600:	40013000 	.word	0x40013000

08000604 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a43      	ldr	r2, [pc, #268]	; (800072c <HAL_SPI_MspInit+0x128>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d17f      	bne.n	8000724 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000624:	4b42      	ldr	r3, [pc, #264]	; (8000730 <HAL_SPI_MspInit+0x12c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a41      	ldr	r2, [pc, #260]	; (8000730 <HAL_SPI_MspInit+0x12c>)
 800062a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <HAL_SPI_MspInit+0x12c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <HAL_SPI_MspInit+0x12c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a3b      	ldr	r2, [pc, #236]	; (8000730 <HAL_SPI_MspInit+0x12c>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b39      	ldr	r3, [pc, #228]	; (8000730 <HAL_SPI_MspInit+0x12c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000654:	23b0      	movs	r3, #176	; 0xb0
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4833      	ldr	r0, [pc, #204]	; (8000734 <HAL_SPI_MspInit+0x130>)
 8000668:	f000 fd4a 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	482d      	ldr	r0, [pc, #180]	; (8000734 <HAL_SPI_MspInit+0x130>)
 8000680:	f000 fd3e 	bl	8001100 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <HAL_SPI_MspInit+0x134>)
 8000686:	4a2d      	ldr	r2, [pc, #180]	; (800073c <HAL_SPI_MspInit+0x138>)
 8000688:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <HAL_SPI_MspInit+0x134>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <HAL_SPI_MspInit+0x134>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <HAL_SPI_MspInit+0x134>)
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <HAL_SPI_MspInit+0x134>)
 800069e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <HAL_SPI_MspInit+0x134>)
 80006a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <HAL_SPI_MspInit+0x134>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <HAL_SPI_MspInit+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80006b8:	481f      	ldr	r0, [pc, #124]	; (8000738 <HAL_SPI_MspInit+0x134>)
 80006ba:	f000 fb33 	bl	8000d24 <HAL_DMA_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80006c4:	f7ff ff60 	bl	8000588 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <HAL_SPI_MspInit+0x134>)
 80006cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80006ce:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <HAL_SPI_MspInit+0x134>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <HAL_SPI_MspInit+0x140>)
 80006d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 80006dc:	2210      	movs	r2, #16
 80006de:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 80006ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 80006f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 800070a:	f000 fb0b 	bl	8000d24 <HAL_DMA_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8000714:	f7ff ff38 	bl	8000588 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 800071c:	649a      	str	r2, [r3, #72]	; 0x48
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_SPI_MspInit+0x13c>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013000 	.word	0x40013000
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800
 8000738:	200001d8 	.word	0x200001d8
 800073c:	4002001c 	.word	0x4002001c
 8000740:	2000021c 	.word	0x2000021c
 8000744:	40020030 	.word	0x40020030

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_MspInit+0x68>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_MspInit+0x68>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_MspInit+0x68>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_MspInit+0x68>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <HAL_MspInit+0x68>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x68>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	210f      	movs	r1, #15
 8000782:	f06f 0001 	mvn.w	r0, #1
 8000786:	f000 fa96 	bl	8000cb6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_MspInit+0x6c>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_MspInit+0x6c>)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e6:	f000 f973 	bl	8000ad0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007ea:	f005 f863 	bl	80058b4 <xTaskGetSchedulerState>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d001      	beq.n	80007f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007f4:	f005 fdf8 	bl	80063e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <DMA1_Channel2_IRQHandler+0x10>)
 8000802:	f000 fb49 	bl	8000e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001d8 	.word	0x200001d8

08000810 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <DMA1_Channel3_IRQHandler+0x10>)
 8000816:	f000 fb3f 	bl	8000e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000021c 	.word	0x2000021c

08000824 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <DMA1_Channel6_IRQHandler+0x10>)
 800082a:	f000 fb35 	bl	8000e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200002a8 	.word	0x200002a8

08000838 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <DMA1_Channel7_IRQHandler+0x10>)
 800083e:	f000 fb2b 	bl	8000e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002ec 	.word	0x200002ec

0800084c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000850:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000854:	f000 fdd8 	bl	8001408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f002 f9fc 	bl	8002c9c <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f7ff fe6d 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000260 	.word	0x20000260
 80008b8:	40004400 	.word	0x40004400

080008bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a41      	ldr	r2, [pc, #260]	; (80009dc <HAL_UART_MspInit+0x120>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d17b      	bne.n	80009d4 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <HAL_UART_MspInit+0x124>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <HAL_UART_MspInit+0x124>)
 80008e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e6:	61d3      	str	r3, [r2, #28]
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <HAL_UART_MspInit+0x124>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <HAL_UART_MspInit+0x124>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a39      	ldr	r2, [pc, #228]	; (80009e0 <HAL_UART_MspInit+0x124>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_UART_MspInit+0x124>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090c:	2304      	movs	r3, #4
 800090e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4831      	ldr	r0, [pc, #196]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000920:	f000 fbee 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000924:	2308      	movs	r3, #8
 8000926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	482b      	ldr	r0, [pc, #172]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000938:	f000 fbe2 	bl	8001100 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 800093e:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <HAL_UART_MspInit+0x130>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800096c:	481e      	ldr	r0, [pc, #120]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 800096e:	f000 f9d9 	bl	8000d24 <HAL_DMA_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000978:	f7ff fe06 	bl	8000588 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000980:	63da      	str	r2, [r3, #60]	; 0x3c
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x134>)
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <HAL_UART_MspInit+0x138>)
 800098c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x134>)
 8000990:	2210      	movs	r2, #16
 8000992:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_UART_MspInit+0x134>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x134>)
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009ba:	f000 f9b3 	bl	8000d24 <HAL_DMA_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80009c4:	f7ff fde0 	bl	8000588 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800
 80009e8:	200002a8 	.word	0x200002a8
 80009ec:	4002006c 	.word	0x4002006c
 80009f0:	200002ec 	.word	0x200002ec
 80009f4:	40020080 	.word	0x40020080

080009f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f8:	f7ff ff30 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009fe:	490c      	ldr	r1, [pc, #48]	; (8000a30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a14:	4c09      	ldr	r4, [pc, #36]	; (8000a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a22:	f005 ff3b 	bl	800689c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff fd55 	bl	80004d4 <main>
  bx lr
 8000a2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a34:	08006c4c 	.word	0x08006c4c
  ldr r2, =_sbss
 8000a38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a3c:	20001d44 	.word	0x20001d44

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x28>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x28>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f923 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff fe72 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f93b 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aac:	f000 f903 	bl	8000cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x1c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x20>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <HAL_IncTick+0x20>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000330 	.word	0x20000330

08000af4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <HAL_GetTick+0x10>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000330 	.word	0x20000330

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4906      	ldr	r1, [pc, #24]	; (8000ba0 <__NVIC_EnableIRQ+0x34>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	f7ff ff90 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff2d 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff42 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff90 	bl	8000bf8 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5f 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff35 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e043      	b.n	8000dc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <HAL_DMA_Init+0xa8>)
 8000d42:	4413      	add	r3, r2
 8000d44:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <HAL_DMA_Init+0xac>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	009a      	lsls	r2, r3, #2
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <HAL_DMA_Init+0xb0>)
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	bffdfff8 	.word	0xbffdfff8
 8000dd0:	cccccccd 	.word	0xcccccccd
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_DMA_Start_IT+0x20>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e04b      	b.n	8000e90 <HAL_DMA_Start_IT+0xb8>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d13a      	bne.n	8000e82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0201 	bic.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f000 f937 	bl	80010a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d008      	beq.n	8000e50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 020e 	orr.w	r2, r2, #14
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e00f      	b.n	8000e70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0204 	bic.w	r2, r2, #4
 8000e5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 020a 	orr.w	r2, r2, #10
 8000e6e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e005      	b.n	8000e8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d04f      	beq.n	8000f60 <HAL_DMA_IRQHandler+0xc8>
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d04a      	beq.n	8000f60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d107      	bne.n	8000ee8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0204 	bic.w	r2, r2, #4
 8000ee6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a66      	ldr	r2, [pc, #408]	; (8001088 <HAL_DMA_IRQHandler+0x1f0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d029      	beq.n	8000f46 <HAL_DMA_IRQHandler+0xae>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a65      	ldr	r2, [pc, #404]	; (800108c <HAL_DMA_IRQHandler+0x1f4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d022      	beq.n	8000f42 <HAL_DMA_IRQHandler+0xaa>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a63      	ldr	r2, [pc, #396]	; (8001090 <HAL_DMA_IRQHandler+0x1f8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01a      	beq.n	8000f3c <HAL_DMA_IRQHandler+0xa4>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a62      	ldr	r2, [pc, #392]	; (8001094 <HAL_DMA_IRQHandler+0x1fc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d012      	beq.n	8000f36 <HAL_DMA_IRQHandler+0x9e>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a60      	ldr	r2, [pc, #384]	; (8001098 <HAL_DMA_IRQHandler+0x200>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00a      	beq.n	8000f30 <HAL_DMA_IRQHandler+0x98>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a5f      	ldr	r2, [pc, #380]	; (800109c <HAL_DMA_IRQHandler+0x204>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d102      	bne.n	8000f2a <HAL_DMA_IRQHandler+0x92>
 8000f24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f28:	e00e      	b.n	8000f48 <HAL_DMA_IRQHandler+0xb0>
 8000f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f2e:	e00b      	b.n	8000f48 <HAL_DMA_IRQHandler+0xb0>
 8000f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f34:	e008      	b.n	8000f48 <HAL_DMA_IRQHandler+0xb0>
 8000f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3a:	e005      	b.n	8000f48 <HAL_DMA_IRQHandler+0xb0>
 8000f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f40:	e002      	b.n	8000f48 <HAL_DMA_IRQHandler+0xb0>
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	e000      	b.n	8000f48 <HAL_DMA_IRQHandler+0xb0>
 8000f46:	2304      	movs	r3, #4
 8000f48:	4a55      	ldr	r2, [pc, #340]	; (80010a0 <HAL_DMA_IRQHandler+0x208>)
 8000f4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 8094 	beq.w	800107e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f5e:	e08e      	b.n	800107e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	2202      	movs	r2, #2
 8000f66:	409a      	lsls	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d056      	beq.n	800101e <HAL_DMA_IRQHandler+0x186>
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d051      	beq.n	800101e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10b      	bne.n	8000fa0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 020a 	bic.w	r2, r2, #10
 8000f96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a38      	ldr	r2, [pc, #224]	; (8001088 <HAL_DMA_IRQHandler+0x1f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d029      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x166>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a37      	ldr	r2, [pc, #220]	; (800108c <HAL_DMA_IRQHandler+0x1f4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d022      	beq.n	8000ffa <HAL_DMA_IRQHandler+0x162>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a35      	ldr	r2, [pc, #212]	; (8001090 <HAL_DMA_IRQHandler+0x1f8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01a      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x15c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a34      	ldr	r2, [pc, #208]	; (8001094 <HAL_DMA_IRQHandler+0x1fc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d012      	beq.n	8000fee <HAL_DMA_IRQHandler+0x156>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a32      	ldr	r2, [pc, #200]	; (8001098 <HAL_DMA_IRQHandler+0x200>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00a      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x150>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a31      	ldr	r2, [pc, #196]	; (800109c <HAL_DMA_IRQHandler+0x204>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d102      	bne.n	8000fe2 <HAL_DMA_IRQHandler+0x14a>
 8000fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fe0:	e00e      	b.n	8001000 <HAL_DMA_IRQHandler+0x168>
 8000fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fe6:	e00b      	b.n	8001000 <HAL_DMA_IRQHandler+0x168>
 8000fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fec:	e008      	b.n	8001000 <HAL_DMA_IRQHandler+0x168>
 8000fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff2:	e005      	b.n	8001000 <HAL_DMA_IRQHandler+0x168>
 8000ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff8:	e002      	b.n	8001000 <HAL_DMA_IRQHandler+0x168>
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	e000      	b.n	8001000 <HAL_DMA_IRQHandler+0x168>
 8000ffe:	2302      	movs	r3, #2
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <HAL_DMA_IRQHandler+0x208>)
 8001002:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	2b00      	cmp	r3, #0
 8001012:	d034      	beq.n	800107e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800101c:	e02f      	b.n	800107e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	2208      	movs	r2, #8
 8001024:	409a      	lsls	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d028      	beq.n	8001080 <HAL_DMA_IRQHandler+0x1e8>
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d023      	beq.n	8001080 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    }
  }
  return;
 800107e:	bf00      	nop
 8001080:	bf00      	nop
}
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020008 	.word	0x40020008
 800108c:	4002001c 	.word	0x4002001c
 8001090:	40020030 	.word	0x40020030
 8001094:	40020044 	.word	0x40020044
 8001098:	40020058 	.word	0x40020058
 800109c:	4002006c 	.word	0x4002006c
 80010a0:	40020000 	.word	0x40020000

080010a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b10      	cmp	r3, #16
 80010d0:	d108      	bne.n	80010e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010e2:	e007      	b.n	80010f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	60da      	str	r2, [r3, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e169      	b.n	80013e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001114:	2201      	movs	r2, #1
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8158 	bne.w	80013e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a9a      	ldr	r2, [pc, #616]	; (80013a0 <HAL_GPIO_Init+0x2a0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d05e      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 800113c:	4a98      	ldr	r2, [pc, #608]	; (80013a0 <HAL_GPIO_Init+0x2a0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d875      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 8001142:	4a98      	ldr	r2, [pc, #608]	; (80013a4 <HAL_GPIO_Init+0x2a4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d058      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 8001148:	4a96      	ldr	r2, [pc, #600]	; (80013a4 <HAL_GPIO_Init+0x2a4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d86f      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 800114e:	4a96      	ldr	r2, [pc, #600]	; (80013a8 <HAL_GPIO_Init+0x2a8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d052      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 8001154:	4a94      	ldr	r2, [pc, #592]	; (80013a8 <HAL_GPIO_Init+0x2a8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d869      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 800115a:	4a94      	ldr	r2, [pc, #592]	; (80013ac <HAL_GPIO_Init+0x2ac>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d04c      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 8001160:	4a92      	ldr	r2, [pc, #584]	; (80013ac <HAL_GPIO_Init+0x2ac>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d863      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 8001166:	4a92      	ldr	r2, [pc, #584]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d046      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 800116c:	4a90      	ldr	r2, [pc, #576]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d85d      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 8001172:	2b12      	cmp	r3, #18
 8001174:	d82a      	bhi.n	80011cc <HAL_GPIO_Init+0xcc>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d859      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <HAL_GPIO_Init+0x80>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	080011fb 	.word	0x080011fb
 8001184:	080011d5 	.word	0x080011d5
 8001188:	080011e7 	.word	0x080011e7
 800118c:	08001229 	.word	0x08001229
 8001190:	0800122f 	.word	0x0800122f
 8001194:	0800122f 	.word	0x0800122f
 8001198:	0800122f 	.word	0x0800122f
 800119c:	0800122f 	.word	0x0800122f
 80011a0:	0800122f 	.word	0x0800122f
 80011a4:	0800122f 	.word	0x0800122f
 80011a8:	0800122f 	.word	0x0800122f
 80011ac:	0800122f 	.word	0x0800122f
 80011b0:	0800122f 	.word	0x0800122f
 80011b4:	0800122f 	.word	0x0800122f
 80011b8:	0800122f 	.word	0x0800122f
 80011bc:	0800122f 	.word	0x0800122f
 80011c0:	0800122f 	.word	0x0800122f
 80011c4:	080011dd 	.word	0x080011dd
 80011c8:	080011f1 	.word	0x080011f1
 80011cc:	4a79      	ldr	r2, [pc, #484]	; (80013b4 <HAL_GPIO_Init+0x2b4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011d2:	e02c      	b.n	800122e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	623b      	str	r3, [r7, #32]
          break;
 80011da:	e029      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	3304      	adds	r3, #4
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	e024      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	3308      	adds	r3, #8
 80011ec:	623b      	str	r3, [r7, #32]
          break;
 80011ee:	e01f      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	330c      	adds	r3, #12
 80011f6:	623b      	str	r3, [r7, #32]
          break;
 80011f8:	e01a      	b.n	8001230 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001202:	2304      	movs	r3, #4
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e013      	b.n	8001230 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	611a      	str	r2, [r3, #16]
          break;
 800121a:	e009      	b.n	8001230 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800121c:	2308      	movs	r3, #8
 800121e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	615a      	str	r2, [r3, #20]
          break;
 8001226:	e003      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x130>
          break;
 800122e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2bff      	cmp	r3, #255	; 0xff
 8001234:	d801      	bhi.n	800123a <HAL_GPIO_Init+0x13a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	e001      	b.n	800123e <HAL_GPIO_Init+0x13e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3304      	adds	r3, #4
 800123e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	d802      	bhi.n	800124c <HAL_GPIO_Init+0x14c>
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	e002      	b.n	8001252 <HAL_GPIO_Init+0x152>
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	3b08      	subs	r3, #8
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	210f      	movs	r1, #15
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	401a      	ands	r2, r3
 8001264:	6a39      	ldr	r1, [r7, #32]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	431a      	orrs	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80b1 	beq.w	80013e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_GPIO_Init+0x2b8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_GPIO_Init+0x2b8>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_GPIO_Init+0x2b8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001298:	4a48      	ldr	r2, [pc, #288]	; (80013bc <HAL_GPIO_Init+0x2bc>)
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <HAL_GPIO_Init+0x2c0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d013      	beq.n	80012ec <HAL_GPIO_Init+0x1ec>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3f      	ldr	r2, [pc, #252]	; (80013c4 <HAL_GPIO_Init+0x2c4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1e8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3e      	ldr	r2, [pc, #248]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <HAL_GPIO_Init+0x2cc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1e0>
 80012dc:	2303      	movs	r3, #3
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e0:	2304      	movs	r3, #4
 80012e2:	e004      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012ec:	2300      	movs	r3, #0
 80012ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f0:	f002 0203 	and.w	r2, r2, #3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <HAL_GPIO_Init+0x2bc>)
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	492c      	ldr	r1, [pc, #176]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	608b      	str	r3, [r1, #8]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	4928      	ldr	r1, [pc, #160]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	4922      	ldr	r1, [pc, #136]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	60cb      	str	r3, [r1, #12]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	491e      	ldr	r1, [pc, #120]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4918      	ldr	r1, [pc, #96]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	43db      	mvns	r3, r3
 800137e:	4914      	ldr	r1, [pc, #80]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001380:	4013      	ands	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d021      	beq.n	80013d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
 800139c:	e021      	b.n	80013e2 <HAL_GPIO_Init+0x2e2>
 800139e:	bf00      	nop
 80013a0:	10320000 	.word	0x10320000
 80013a4:	10310000 	.word	0x10310000
 80013a8:	10220000 	.word	0x10220000
 80013ac:	10210000 	.word	0x10210000
 80013b0:	10120000 	.word	0x10120000
 80013b4:	10110000 	.word	0x10110000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40010800 	.word	0x40010800
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	40011000 	.word	0x40011000
 80013cc:	40011400 	.word	0x40011400
 80013d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_GPIO_Init+0x304>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4909      	ldr	r1, [pc, #36]	; (8001404 <HAL_GPIO_Init+0x304>)
 80013de:	4013      	ands	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f47f ae8e 	bne.w	8001114 <HAL_GPIO_Init+0x14>
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	372c      	adds	r7, #44	; 0x2c
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f806 	bl	8001438 <HAL_GPIO_EXTI_Callback>
  }
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e272      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8087 	beq.w	800157a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146c:	4b92      	ldr	r3, [pc, #584]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b04      	cmp	r3, #4
 8001476:	d00c      	beq.n	8001492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d112      	bne.n	80014aa <HAL_RCC_OscConfig+0x5e>
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d10b      	bne.n	80014aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001492:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d06c      	beq.n	8001578 <HAL_RCC_OscConfig+0x12c>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d168      	bne.n	8001578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e24c      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x76>
 80014b4:	4b80      	ldr	r3, [pc, #512]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a7f      	ldr	r2, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e02e      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x98>
 80014ca:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7a      	ldr	r2, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0xbc>
 80014ee:	4b72      	ldr	r3, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a71      	ldr	r2, [pc, #452]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6e      	ldr	r2, [pc, #440]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 8001508:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6a      	ldr	r2, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a67      	ldr	r2, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fae4 	bl	8000af4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fae0 	bl	8000af4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e200      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xe4>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fad0 	bl	8000af4 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff facc 	bl	8000af4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1ec      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x10c>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001586:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x18c>
 800159e:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x176>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1c0      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4939      	ldr	r1, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_RCC_OscConfig+0x270>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fa85 	bl	8000af4 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fa81 	bl	8000af4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1a1      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4927      	ldr	r1, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_RCC_OscConfig+0x270>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fa64 	bl	8000af4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fa60 	bl	8000af4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e180      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03a      	beq.n	80016d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d019      	beq.n	8001696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_RCC_OscConfig+0x274>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff fa44 	bl	8000af4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fa40 	bl	8000af4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e160      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f000 face 	bl	8001c30 <RCC_Delay>
 8001694:	e01c      	b.n	80016d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_RCC_OscConfig+0x274>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff fa2a 	bl	8000af4 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a2:	e00f      	b.n	80016c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fa26 	bl	8000af4 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d908      	bls.n	80016c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e146      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	42420000 	.word	0x42420000
 80016c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	4b92      	ldr	r3, [pc, #584]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1e9      	bne.n	80016a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a6 	beq.w	800182a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10d      	bne.n	800170a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a87      	ldr	r2, [pc, #540]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	4b82      	ldr	r3, [pc, #520]	; (8001914 <HAL_RCC_OscConfig+0x4c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	4b7f      	ldr	r3, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x4c8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7e      	ldr	r2, [pc, #504]	; (8001914 <HAL_RCC_OscConfig+0x4c8>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7ff f9e7 	bl	8000af4 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff f9e3 	bl	8000af4 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b64      	cmp	r3, #100	; 0x64
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e103      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b75      	ldr	r3, [pc, #468]	; (8001914 <HAL_RCC_OscConfig+0x4c8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x312>
 8001750:	4b6f      	ldr	r3, [pc, #444]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a6e      	ldr	r2, [pc, #440]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	e02d      	b.n	80017ba <HAL_RCC_OscConfig+0x36e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x334>
 8001766:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a69      	ldr	r2, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a66      	ldr	r2, [pc, #408]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	e01c      	b.n	80017ba <HAL_RCC_OscConfig+0x36e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d10c      	bne.n	80017a2 <HAL_RCC_OscConfig+0x356>
 8001788:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a60      	ldr	r2, [pc, #384]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6213      	str	r3, [r2, #32]
 8001794:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a5d      	ldr	r2, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	e00b      	b.n	80017ba <HAL_RCC_OscConfig+0x36e>
 80017a2:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	6213      	str	r3, [r2, #32]
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a57      	ldr	r2, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d015      	beq.n	80017ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff f997 	bl	8000af4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff f993 	bl	8000af4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0b1      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ee      	beq.n	80017ca <HAL_RCC_OscConfig+0x37e>
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff f981 	bl	8000af4 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f7ff f97d 	bl	8000af4 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f241 3288 	movw	r2, #5000	; 0x1388
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e09b      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	4b40      	ldr	r3, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ee      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d105      	bne.n	800182a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181e:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a3b      	ldr	r2, [pc, #236]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d061      	beq.n	8001904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d146      	bne.n	80018d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001848:	4b33      	ldr	r3, [pc, #204]	; (8001918 <HAL_RCC_OscConfig+0x4cc>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff f951 	bl	8000af4 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff f94d 	bl	8000af4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e06d      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d108      	bne.n	8001890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	4921      	ldr	r1, [pc, #132]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a19      	ldr	r1, [r3, #32]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	430b      	orrs	r3, r1
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x4cc>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff f921 	bl	8000af4 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff f91d 	bl	8000af4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e03d      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x46a>
 80018d4:	e035      	b.n	8001942 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x4cc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff f90a 	bl	8000af4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f906 	bl	8000af4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e026      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x498>
 8001902:	e01e      	b.n	8001942 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e019      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
 8001918:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_OscConfig+0x500>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	429a      	cmp	r2, r3
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0d0      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d910      	bls.n	8001994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b67      	ldr	r3, [pc, #412]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 0207 	bic.w	r2, r3, #7
 800197a:	4965      	ldr	r1, [pc, #404]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0b8      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d0:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	494d      	ldr	r1, [pc, #308]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d040      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d115      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e07f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e073      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06b      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4936      	ldr	r1, [pc, #216]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f858 	bl	8000af4 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f854 	bl	8000af4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e053      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d210      	bcs.n	8001aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4922      	ldr	r1, [pc, #136]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e032      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4916      	ldr	r1, [pc, #88]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ade:	f000 f821 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	490a      	ldr	r1, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	5ccb      	ldrb	r3, [r1, r3]
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1cc>)
 8001af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_ClockConfig+0x1d0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe ffb6 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08006bb8 	.word	0x08006bb8
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x30>
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x36>
 8001b52:	e027      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b56:	613b      	str	r3, [r7, #16]
      break;
 8001b58:	e027      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d010      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	0c5b      	lsrs	r3, r3, #17
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b86:	fb03 f202 	mul.w	r2, r3, r2
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e004      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	613b      	str	r3, [r7, #16]
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba6:	613b      	str	r3, [r7, #16]
      break;
 8001ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001baa:	693b      	ldr	r3, [r7, #16]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	007a1200 	.word	0x007a1200
 8001bc0:	08006bd0 	.word	0x08006bd0
 8001bc4:	08006be0 	.word	0x08006be0
 8001bc8:	003d0900 	.word	0x003d0900

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000000 	.word	0x20000000

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001be4:	f7ff fff2 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4903      	ldr	r1, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08006bc8 	.word	0x08006bc8

08001c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0adb      	lsrs	r3, r3, #11
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08006bc8 	.word	0x08006bc8

08001c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <RCC_Delay+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <RCC_Delay+0x38>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a5b      	lsrs	r3, r3, #9
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c4c:	bf00      	nop
  }
  while (Delay --);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	60fa      	str	r2, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <RCC_Delay+0x1c>
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000000 	.word	0x20000000
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e076      	b.n	8001d6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d108      	bne.n	8001c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c8e:	d009      	beq.n	8001ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
 8001c96:	e005      	b.n	8001ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fca0 	bl	8000604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d28:	ea42 0103 	orr.w	r1, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	0c1a      	lsrs	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f002 0204 	and.w	r2, r2, #4
 8001d4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d002      	beq.n	8001d9a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d98:	e0fb      	b.n	8001f92 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001da2:	d112      	bne.n	8001dca <HAL_SPI_Receive+0x56>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10e      	bne.n	8001dca <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2204      	movs	r2, #4
 8001db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f8ef 	bl	8001fa4 <HAL_SPI_TransmitReceive>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	e0e8      	b.n	8001f9c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_SPI_Receive+0x64>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e0e1      	b.n	8001f9c <HAL_SPI_Receive+0x228>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001de0:	f7fe fe88 	bl	8000af4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_SPI_Receive+0x7e>
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001df6:	e0cc      	b.n	8001f92 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	88fa      	ldrh	r2, [r7, #6]
 8001e16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3e:	d10f      	bne.n	8001e60 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b40      	cmp	r3, #64	; 0x40
 8001e6c:	d007      	beq.n	8001e7e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d16a      	bne.n	8001f5c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e86:	e032      	b.n	8001eee <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d115      	bne.n	8001ec2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f103 020c 	add.w	r2, r3, #12
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ec0:	e015      	b.n	8001eee <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ec2:	f7fe fe17 	bl	8000af4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d803      	bhi.n	8001eda <HAL_SPI_Receive+0x166>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed8:	d102      	bne.n	8001ee0 <HAL_SPI_Receive+0x16c>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001eec:	e051      	b.n	8001f92 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1c7      	bne.n	8001e88 <HAL_SPI_Receive+0x114>
 8001ef8:	e035      	b.n	8001f66 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d113      	bne.n	8001f30 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	b292      	uxth	r2, r2
 8001f14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	1c9a      	adds	r2, r3, #2
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f2e:	e015      	b.n	8001f5c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f30:	f7fe fde0 	bl	8000af4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d803      	bhi.n	8001f48 <HAL_SPI_Receive+0x1d4>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f46:	d102      	bne.n	8001f4e <HAL_SPI_Receive+0x1da>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f5a:	e01a      	b.n	8001f92 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1c9      	bne.n	8001efa <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	6839      	ldr	r1, [r7, #0]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fe26 	bl	8002bbc <SPI_EndRxTransaction>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
 8001f88:	e003      	b.n	8001f92 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_SPI_TransmitReceive+0x26>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e198      	b.n	80022fc <HAL_SPI_TransmitReceive+0x358>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fd2:	f7fe fd8f 	bl	8000af4 <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d00f      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x70>
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ffa:	d107      	bne.n	800200c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_SPI_TransmitReceive+0x68>
 8002004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002008:	2b04      	cmp	r3, #4
 800200a:	d003      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800200c:	2302      	movs	r3, #2
 800200e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002012:	e16d      	b.n	80022f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_SPI_TransmitReceive+0x82>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_SPI_TransmitReceive+0x82>
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800202c:	e160      	b.n	80022f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b04      	cmp	r3, #4
 8002038:	d003      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2205      	movs	r2, #5
 800203e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	2b40      	cmp	r3, #64	; 0x40
 8002084:	d007      	beq.n	8002096 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800209e:	d17c      	bne.n	800219a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_SPI_TransmitReceive+0x10a>
 80020a8:	8b7b      	ldrh	r3, [r7, #26]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d16a      	bne.n	8002184 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	881a      	ldrh	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	1c9a      	adds	r2, r3, #2
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d2:	e057      	b.n	8002184 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d11b      	bne.n	800211a <HAL_SPI_TransmitReceive+0x176>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d016      	beq.n	800211a <HAL_SPI_TransmitReceive+0x176>
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d113      	bne.n	800211a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	1c9a      	adds	r2, r3, #2
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d119      	bne.n	800215c <HAL_SPI_TransmitReceive+0x1b8>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d014      	beq.n	800215c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	b292      	uxth	r2, r2
 800213e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	1c9a      	adds	r2, r3, #2
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002158:	2301      	movs	r3, #1
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800215c:	f7fe fcca 	bl	8000af4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002168:	429a      	cmp	r2, r3
 800216a:	d80b      	bhi.n	8002184 <HAL_SPI_TransmitReceive+0x1e0>
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002172:	d007      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002182:	e0b5      	b.n	80022f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1a2      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x130>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d19d      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x130>
 8002198:	e080      	b.n	800229c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0x204>
 80021a2:	8b7b      	ldrh	r3, [r7, #26]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d16f      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	330c      	adds	r3, #12
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ce:	e05b      	b.n	8002288 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d11c      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x274>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d017      	beq.n	8002218 <HAL_SPI_TransmitReceive+0x274>
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d114      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330c      	adds	r3, #12
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d119      	bne.n	800225a <HAL_SPI_TransmitReceive+0x2b6>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d014      	beq.n	800225a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002256:	2301      	movs	r3, #1
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800225a:	f7fe fc4b 	bl	8000af4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002266:	429a      	cmp	r2, r3
 8002268:	d803      	bhi.n	8002272 <HAL_SPI_TransmitReceive+0x2ce>
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002270:	d102      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x2d4>
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	2b00      	cmp	r3, #0
 8002276:	d107      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002286:	e033      	b.n	80022f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d19e      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x22c>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d199      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fcdd 	bl	8002c60 <SPI_EndRxTxTransaction>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022b8:	e01a      	b.n	80022f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022e6:	e003      	b.n	80022f0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3730      	adds	r7, #48	; 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_SPI_Transmit_DMA+0x20>
 8002320:	2302      	movs	r3, #2
 8002322:	e097      	b.n	8002454 <HAL_SPI_Transmit_DMA+0x150>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d002      	beq.n	800233e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002338:	2302      	movs	r3, #2
 800233a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800233c:	e085      	b.n	800244a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_SPI_Transmit_DMA+0x46>
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800234e:	e07c      	b.n	800244a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2203      	movs	r2, #3
 8002354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002396:	d10f      	bne.n	80023b8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_SPI_Transmit_DMA+0x158>)
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <HAL_SPI_Transmit_DMA+0x15c>)
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023cc:	4a25      	ldr	r2, [pc, #148]	; (8002464 <HAL_SPI_Transmit_DMA+0x160>)
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	2200      	movs	r2, #0
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4619      	mov	r1, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023f0:	f7fe fcf2 	bl	8000dd8 <HAL_DMA_Start_IT>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f043 0210 	orr.w	r2, r3, #16
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]

    goto error;
 800240a:	e01e      	b.n	800244a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d007      	beq.n	800242a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0202 	orr.w	r2, r2, #2
 8002448:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08002a19 	.word	0x08002a19
 8002460:	0800283f 	.word	0x0800283f
 8002464:	08002a6d 	.word	0x08002a6d

08002468 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d002      	beq.n	800248c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	75fb      	strb	r3, [r7, #23]
    goto error;
 800248a:	e0a2      	b.n	80025d2 <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d110      	bne.n	80024b6 <HAL_SPI_Receive_DMA+0x4e>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249c:	d10b      	bne.n	80024b6 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2204      	movs	r2, #4
 80024a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f89f 	bl	80025f0 <HAL_SPI_TransmitReceive_DMA>
 80024b2:	4603      	mov	r3, r0
 80024b4:	e092      	b.n	80025dc <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_SPI_Receive_DMA+0x5c>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e08b      	b.n	80025dc <HAL_SPI_Receive_DMA+0x174>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_Receive_DMA+0x70>
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024dc:	e079      	b.n	80025d2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2204      	movs	r2, #4
 80024e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251e:	d10f      	bne.n	8002540 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800253e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_SPI_Receive_DMA+0x17c>)
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_SPI_Receive_DMA+0x180>)
 800254e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	4a25      	ldr	r2, [pc, #148]	; (80025ec <HAL_SPI_Receive_DMA+0x184>)
 8002556:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	2200      	movs	r2, #0
 800255e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	4619      	mov	r1, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002576:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002578:	f7fe fc2e 	bl	8000dd8 <HAL_DMA_Start_IT>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f043 0210 	orr.w	r2, r3, #16
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002592:	e01e      	b.n	80025d2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d007      	beq.n	80025b2 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025da:	7dfb      	ldrb	r3, [r7, #23]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	08002a35 	.word	0x08002a35
 80025e8:	080028e5 	.word	0x080028e5
 80025ec:	08002a6d 	.word	0x08002a6d

080025f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_SPI_TransmitReceive_DMA+0x20>
 800260c:	2302      	movs	r3, #2
 800260e:	e0db      	b.n	80027c8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800261e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002626:	7dbb      	ldrb	r3, [r7, #22]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00d      	beq.n	8002648 <HAL_SPI_TransmitReceive_DMA+0x58>
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002632:	d106      	bne.n	8002642 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_SPI_TransmitReceive_DMA+0x52>
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d002      	beq.n	8002648 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002646:	e0ba      	b.n	80027be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800265e:	e0ae      	b.n	80027be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b04      	cmp	r3, #4
 800266a:	d003      	beq.n	8002674 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d108      	bne.n	80026c8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4a45      	ldr	r2, [pc, #276]	; (80027d0 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	4a44      	ldr	r2, [pc, #272]	; (80027d4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
 80026c6:	e007      	b.n	80026d8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	4a42      	ldr	r2, [pc, #264]	; (80027d8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	4a41      	ldr	r2, [pc, #260]	; (80027dc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80026de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	330c      	adds	r3, #12
 80026f2:	4619      	mov	r1, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002700:	f7fe fb6a 	bl	8000dd8 <HAL_DMA_Start_IT>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]

    goto error;
 800271a:	e050      	b.n	80027be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	2200      	movs	r2, #0
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002738:	2200      	movs	r2, #0
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	2200      	movs	r2, #0
 800274a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	4619      	mov	r1, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002764:	f7fe fb38 	bl	8000dd8 <HAL_DMA_Start_IT>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800277e:	e01e      	b.n	80027be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	d007      	beq.n	800279e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0202 	orr.w	r2, r2, #2
 80027bc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	08002a35 	.word	0x08002a35
 80027d4:	080028e5 	.word	0x080028e5
 80027d8:	08002a51 	.word	0x08002a51
 80027dc:	0800298b 	.word	0x0800298b
 80027e0:	08002a6d 	.word	0x08002a6d

080027e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800284c:	f7fe f952 	bl	8000af4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b20      	cmp	r3, #32
 800285e:	d03b      	beq.n	80028d8 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0220 	bic.w	r2, r2, #32
 800286e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0202 	bic.w	r2, r2, #2
 800287e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	2164      	movs	r1, #100	; 0x64
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f000 f9eb 	bl	8002c60 <SPI_EndRxTxTransaction>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f7ff ffab 	bl	800282c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80028d6:	e002      	b.n	80028de <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80028d8:	6978      	ldr	r0, [r7, #20]
 80028da:	f7fd fc9f 	bl	800021c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028f2:	f7fe f8ff 	bl	8000af4 <HAL_GetTick>
 80028f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d03b      	beq.n	800297e <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0220 	bic.w	r2, r2, #32
 8002914:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <SPI_DMAReceiveCplt+0x56>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002926:	d108      	bne.n	800293a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0203 	bic.w	r2, r2, #3
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	e007      	b.n	800294a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	2164      	movs	r1, #100	; 0x64
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f934 	bl	8002bbc <SPI_EndRxTransaction>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ff58 	bl	800282c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800297c:	e002      	b.n	8002984 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7fd fc3c 	bl	80001fc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002998:	f7fe f8ac 	bl	8000af4 <HAL_GetTick>
 800299c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d02f      	beq.n	8002a0c <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0220 	bic.w	r2, r2, #32
 80029ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	2164      	movs	r1, #100	; 0x64
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f94d 	bl	8002c60 <SPI_EndRxTxTransaction>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0203 	bic.w	r2, r2, #3
 80029e6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff ff11 	bl	800282c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002a0a:	e002      	b.n	8002a12 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fee9 	bl	80027e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff fee5 	bl	80027f6 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7ff fee0 	bl	8002808 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff fedb 	bl	800281a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0203 	bic.w	r2, r2, #3
 8002a88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff fec4 	bl	800282c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002abc:	f7fe f81a 	bl	8000af4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002acc:	f7fe f812 	bl	8000af4 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae2:	e054      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aea:	d050      	beq.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aec:	f7fe f802 	bl	8000af4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d902      	bls.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13d      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d111      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	d004      	beq.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d107      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	d10f      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e017      	b.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d19b      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000000 	.word	0x20000000

08002bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd0:	d111      	bne.n	8002bf6 <SPI_EndRxTransaction+0x3a>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bda:	d004      	beq.n	8002be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be4:	d107      	bne.n	8002bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfe:	d117      	bne.n	8002c30 <SPI_EndRxTransaction+0x74>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c08:	d112      	bne.n	8002c30 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2101      	movs	r1, #1
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff ff49 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01a      	beq.n	8002c56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e013      	b.n	8002c58 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff ff36 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f043 0220 	orr.w	r2, r3, #32
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e000      	b.n	8002c58 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff ff18 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e000      	b.n	8002c94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e042      	b.n	8002d34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fdfa 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fc63 	bl	80035ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d17c      	bne.n	8002e56 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Receive+0x2c>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e075      	b.n	8002e58 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2222      	movs	r2, #34	; 0x22
 8002d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d80:	f7fd feb8 	bl	8000af4 <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9a:	d108      	bne.n	8002dae <HAL_UART_Receive+0x72>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	e003      	b.n	8002db6 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002db6:	e043      	b.n	8002e40 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fa60 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e042      	b.n	8002e58 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10c      	bne.n	8002df2 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	3302      	adds	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e01f      	b.n	8002e32 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfa:	d007      	beq.n	8002e0c <HAL_UART_Receive+0xd0>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <HAL_UART_Receive+0xde>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e008      	b.n	8002e2c <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1b6      	bne.n	8002db8 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	; 0x30
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d156      	bne.n	8002f28 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_UART_Transmit_DMA+0x26>
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e04f      	b.n	8002f2a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <HAL_UART_Transmit_DMA+0xd4>)
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_UART_Transmit_DMA+0xd8>)
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <HAL_UART_Transmit_DMA+0xdc>)
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3304      	adds	r3, #4
 8002ede:	461a      	mov	r2, r3
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	f7fd ff79 	bl	8000dd8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3314      	adds	r3, #20
 8002ef6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	617b      	str	r3, [r7, #20]
   return(result);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f10:	627a      	str	r2, [r7, #36]	; 0x24
 8002f12:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e5      	bne.n	8002ef0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3730      	adds	r7, #48	; 0x30
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	08002fd7 	.word	0x08002fd7
 8002f38:	08003071 	.word	0x08003071
 8002f3c:	080031f5 	.word	0x080031f5

08002f40 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d112      	bne.n	8002f80 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_UART_Receive_DMA+0x26>
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00b      	b.n	8002f82 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f9f4 	bl	8003364 <UART_Start_Receive_DMA>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	e000      	b.n	8002f82 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b090      	sub	sp, #64	; 0x40
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d137      	bne.n	8003062 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	623b      	str	r3, [r7, #32]
   return(result);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3314      	adds	r3, #20
 8003016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003018:	633a      	str	r2, [r7, #48]	; 0x30
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800301e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e5      	bne.n	8002ff8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800302c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	60fb      	str	r3, [r7, #12]
   return(result);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304c:	61fa      	str	r2, [r7, #28]
 800304e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	69b9      	ldr	r1, [r7, #24]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	617b      	str	r3, [r7, #20]
   return(result);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003060:	e002      	b.n	8003068 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003062:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003064:	f7fd f8ba 	bl	80001dc <HAL_UART_TxCpltCallback>
}
 8003068:	bf00      	nop
 800306a:	3740      	adds	r7, #64	; 0x40
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff ff83 	bl	8002f8a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b09c      	sub	sp, #112	; 0x70
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d172      	bne.n	800318e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	2200      	movs	r2, #0
 80030ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80030d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e5      	bne.n	80030ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	667b      	str	r3, [r7, #100]	; 0x64
 80030fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003102:	647a      	str	r2, [r7, #68]	; 0x44
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e5      	bne.n	80030e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	623b      	str	r3, [r7, #32]
   return(result);
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312c:	663b      	str	r3, [r7, #96]	; 0x60
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003136:	633a      	str	r2, [r7, #48]	; 0x30
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800313c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e5      	bne.n	8003116 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800314a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	2b01      	cmp	r3, #1
 8003158:	d119      	bne.n	800318e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	60fb      	str	r3, [r7, #12]
   return(result);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f023 0310 	bic.w	r3, r3, #16
 8003170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800317a:	61fa      	str	r2, [r7, #28]
 800317c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	617b      	str	r3, [r7, #20]
   return(result);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e5      	bne.n	800315a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	2200      	movs	r2, #0
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800319c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031a0:	4619      	mov	r1, r3
 80031a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031a4:	f7ff ff0c 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031a8:	e002      	b.n	80031b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80031aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031ac:	f7fd f806 	bl	80001bc <HAL_UART_RxCpltCallback>
}
 80031b0:	bf00      	nop
 80031b2:	3770      	adds	r7, #112	; 0x70
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d108      	bne.n	80031e6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff feee 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031e4:	e002      	b.n	80031ec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff fed8 	bl	8002f9c <HAL_UART_RxHalfCpltCallback>
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b21      	cmp	r3, #33	; 0x21
 8003226:	d108      	bne.n	800323a <UART_DMAError+0x46>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003234:	68b8      	ldr	r0, [r7, #8]
 8003236:	f000 f92f 	bl	8003498 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b22      	cmp	r3, #34	; 0x22
 800325a:	d108      	bne.n	800326e <UART_DMAError+0x7a>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2200      	movs	r2, #0
 8003266:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003268:	68b8      	ldr	r0, [r7, #8]
 800326a:	f000 f93c 	bl	80034e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f043 0210 	orr.w	r2, r3, #16
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800327a:	68b8      	ldr	r0, [r7, #8]
 800327c:	f7ff fe97 	bl	8002fae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b090      	sub	sp, #64	; 0x40
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003298:	e050      	b.n	800333c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a0:	d04c      	beq.n	800333c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a8:	f7fd fc24 	bl	8000af4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d241      	bcs.n	800333c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d8:	637a      	str	r2, [r7, #52]	; 0x34
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e5      	bne.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	613b      	str	r3, [r7, #16]
   return(result);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330c:	623a      	str	r2, [r7, #32]
 800330e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	69f9      	ldr	r1, [r7, #28]
 8003312:	6a3a      	ldr	r2, [r7, #32]
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	61bb      	str	r3, [r7, #24]
   return(result);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e00f      	b.n	800335c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	429a      	cmp	r2, r3
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	429a      	cmp	r2, r3
 8003358:	d09f      	beq.n	800329a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3740      	adds	r7, #64	; 0x40
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b098      	sub	sp, #96	; 0x60
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2222      	movs	r2, #34	; 0x22
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	4a3e      	ldr	r2, [pc, #248]	; (800348c <UART_Start_Receive_DMA+0x128>)
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	4a3d      	ldr	r2, [pc, #244]	; (8003490 <UART_Start_Receive_DMA+0x12c>)
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	4a3c      	ldr	r2, [pc, #240]	; (8003494 <UART_Start_Receive_DMA+0x130>)
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	2200      	movs	r2, #0
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80033ac:	f107 0308 	add.w	r3, r7, #8
 80033b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	f7fd fd08 	bl	8000dd8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d019      	beq.n	800341a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003406:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800340c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e5      	bne.n	80033e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3314      	adds	r3, #20
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	657b      	str	r3, [r7, #84]	; 0x54
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3314      	adds	r3, #20
 8003438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800343a:	63ba      	str	r2, [r7, #56]	; 0x38
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e5      	bne.n	800341a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3314      	adds	r3, #20
 8003454:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	617b      	str	r3, [r7, #20]
   return(result);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003464:	653b      	str	r3, [r7, #80]	; 0x50
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800346e:	627a      	str	r2, [r7, #36]	; 0x24
 8003470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6a39      	ldr	r1, [r7, #32]
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	61fb      	str	r3, [r7, #28]
   return(result);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e5      	bne.n	800344e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3760      	adds	r7, #96	; 0x60
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	0800308d 	.word	0x0800308d
 8003490:	080031b9 	.word	0x080031b9
 8003494:	080031f5 	.word	0x080031f5

08003498 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	61ba      	str	r2, [r7, #24]
 80034c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6979      	ldr	r1, [r7, #20]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	613b      	str	r3, [r7, #16]
   return(result);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80034dc:	bf00      	nop
 80034de:	3724      	adds	r7, #36	; 0x24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b095      	sub	sp, #84	; 0x54
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800350e:	643a      	str	r2, [r7, #64]	; 0x40
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e5      	bne.n	80034ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3314      	adds	r3, #20
 8003528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	61fb      	str	r3, [r7, #28]
   return(result);
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	64bb      	str	r3, [r7, #72]	; 0x48
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003542:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e5      	bne.n	8003522 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	2b01      	cmp	r3, #1
 800355c:	d119      	bne.n	8003592 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	60bb      	str	r3, [r7, #8]
   return(result);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f023 0310 	bic.w	r3, r3, #16
 8003574:	647b      	str	r3, [r7, #68]	; 0x44
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800357e:	61ba      	str	r2, [r7, #24]
 8003580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6979      	ldr	r1, [r7, #20]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	613b      	str	r3, [r7, #16]
   return(result);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e5      	bne.n	800355e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035a0:	bf00      	nop
 80035a2:	3754      	adds	r7, #84	; 0x54
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
	...

080035ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035e6:	f023 030c 	bic.w	r3, r3, #12
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <UART_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003614:	f7fe faf8 	bl	8001c08 <HAL_RCC_GetPCLK2Freq>
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	e002      	b.n	8003622 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800361c:	f7fe fae0 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8003620:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009a      	lsls	r2, r3, #2
 800362c:	441a      	add	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <UART_SetConfig+0x118>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	0119      	lsls	r1, r3, #4
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009a      	lsls	r2, r3, #2
 800364c:	441a      	add	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	fbb2 f2f3 	udiv	r2, r2, r3
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <UART_SetConfig+0x118>)
 800365a:	fba3 0302 	umull	r0, r3, r3, r2
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2064      	movs	r0, #100	; 0x64
 8003662:	fb00 f303 	mul.w	r3, r0, r3
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	3332      	adds	r3, #50	; 0x32
 800366c:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <UART_SetConfig+0x118>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003678:	4419      	add	r1, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009a      	lsls	r2, r3, #2
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <UART_SetConfig+0x118>)
 8003692:	fba3 0302 	umull	r0, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2064      	movs	r0, #100	; 0x64
 800369a:	fb00 f303 	mul.w	r3, r0, r3
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	3332      	adds	r3, #50	; 0x32
 80036a4:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <UART_SetConfig+0x118>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	f003 020f 	and.w	r2, r3, #15
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	440a      	add	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40013800 	.word	0x40013800
 80036c4:	51eb851f 	.word	0x51eb851f

080036c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ce:	f3ef 8305 	mrs	r3, IPSR
 80036d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80036d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036da:	f3ef 8310 	mrs	r3, PRIMASK
 80036de:	607b      	str	r3, [r7, #4]
  return(result);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <osKernelInitialize+0x32>
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <osKernelInitialize+0x60>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d109      	bne.n	8003702 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036ee:	f3ef 8311 	mrs	r3, BASEPRI
 80036f2:	603b      	str	r3, [r7, #0]
  return(result);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80036fa:	f06f 0305 	mvn.w	r3, #5
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e00c      	b.n	800371c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <osKernelInitialize+0x60>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <osKernelInitialize+0x60>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e002      	b.n	800371c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800371c:	68fb      	ldr	r3, [r7, #12]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000334 	.word	0x20000334

0800372c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003732:	f3ef 8305 	mrs	r3, IPSR
 8003736:	60bb      	str	r3, [r7, #8]
  return(result);
 8003738:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373e:	f3ef 8310 	mrs	r3, PRIMASK
 8003742:	607b      	str	r3, [r7, #4]
  return(result);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <osKernelStart+0x32>
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <osKernelStart+0x64>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d109      	bne.n	8003766 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003752:	f3ef 8311 	mrs	r3, BASEPRI
 8003756:	603b      	str	r3, [r7, #0]
  return(result);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <osKernelStart+0x3a>
    stat = osErrorISR;
 800375e:	f06f 0305 	mvn.w	r3, #5
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e00e      	b.n	8003784 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <osKernelStart+0x64>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <osKernelStart+0x64>)
 8003770:	2202      	movs	r2, #2
 8003772:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003774:	f001 fb9e 	bl	8004eb4 <vTaskStartScheduler>
      stat = osOK;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e002      	b.n	8003784 <osKernelStart+0x58>
    } else {
      stat = osError;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003782:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003784:	68fb      	ldr	r3, [r7, #12]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000334 	.word	0x20000334

08003794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b092      	sub	sp, #72	; 0x48
 8003798:	af04      	add	r7, sp, #16
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037a4:	f3ef 8305 	mrs	r3, IPSR
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 8094 	bne.w	80038da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b2:	f3ef 8310 	mrs	r3, PRIMASK
 80037b6:	623b      	str	r3, [r7, #32]
  return(result);
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 808d 	bne.w	80038da <osThreadNew+0x146>
 80037c0:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <osThreadNew+0x150>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d106      	bne.n	80037d6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037c8:	f3ef 8311 	mrs	r3, BASEPRI
 80037cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f040 8082 	bne.w	80038da <osThreadNew+0x146>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d07e      	beq.n	80038da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80037e0:	2318      	movs	r3, #24
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80037e4:	2300      	movs	r3, #0
 80037e6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80037e8:	f107 031b 	add.w	r3, r7, #27
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d045      	beq.n	8003886 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <osThreadNew+0x74>
        name = attr->name;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <osThreadNew+0x9a>
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	2b38      	cmp	r3, #56	; 0x38
 8003820:	d805      	bhi.n	800382e <osThreadNew+0x9a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <osThreadNew+0x9e>
        return (NULL);
 800382e:	2300      	movs	r3, #0
 8003830:	e054      	b.n	80038dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <osThreadNew+0xd4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2bbb      	cmp	r3, #187	; 0xbb
 8003850:	d90a      	bls.n	8003868 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <osThreadNew+0xd4>
        mem = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
 8003866:	e010      	b.n	800388a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <osThreadNew+0xf6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <osThreadNew+0xf6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <osThreadNew+0xf6>
          mem = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
 8003884:	e001      	b.n	800388a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b01      	cmp	r3, #1
 800388e:	d110      	bne.n	80038b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003898:	9202      	str	r2, [sp, #8]
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f001 f920 	bl	8004aec <xTaskCreateStatic>
 80038ac:	4603      	mov	r3, r0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e013      	b.n	80038da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d110      	bne.n	80038da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f001 f96a 	bl	8004ba4 <xTaskCreate>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <osThreadNew+0x146>
          hTask = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038da:	697b      	ldr	r3, [r7, #20]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3738      	adds	r7, #56	; 0x38
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000334 	.word	0x20000334

080038e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f0:	f3ef 8305 	mrs	r3, IPSR
 80038f4:	613b      	str	r3, [r7, #16]
  return(result);
 80038f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003900:	60fb      	str	r3, [r7, #12]
  return(result);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <osDelay+0x34>
 8003908:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <osDelay+0x58>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d109      	bne.n	8003924 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003910:	f3ef 8311 	mrs	r3, BASEPRI
 8003914:	60bb      	str	r3, [r7, #8]
  return(result);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <osDelay+0x3c>
    stat = osErrorISR;
 800391c:	f06f 0305 	mvn.w	r3, #5
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	e007      	b.n	8003934 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <osDelay+0x4c>
      vTaskDelay(ticks);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f001 fa8c 	bl	8004e4c <vTaskDelay>
    }
  }

  return (stat);
 8003934:	697b      	ldr	r3, [r7, #20]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000334 	.word	0x20000334

08003944 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003950:	f3ef 8305 	mrs	r3, IPSR
 8003954:	617b      	str	r3, [r7, #20]
  return(result);
 8003956:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8003958:	2b00      	cmp	r3, #0
 800395a:	d13d      	bne.n	80039d8 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395c:	f3ef 8310 	mrs	r3, PRIMASK
 8003960:	613b      	str	r3, [r7, #16]
  return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d137      	bne.n	80039d8 <osEventFlagsNew+0x94>
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <osEventFlagsNew+0xa0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d105      	bne.n	800397c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003970:	f3ef 8311 	mrs	r3, BASEPRI
 8003974:	60fb      	str	r3, [r7, #12]
  return(result);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d12d      	bne.n	80039d8 <osEventFlagsNew+0x94>
    mem = -1;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003980:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <osEventFlagsNew+0x5a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b1f      	cmp	r3, #31
 8003996:	d902      	bls.n	800399e <osEventFlagsNew+0x5a>
        mem = 1;
 8003998:	2301      	movs	r3, #1
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e00c      	b.n	80039b8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <osEventFlagsNew+0x74>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <osEventFlagsNew+0x74>
          mem = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e001      	b.n	80039b8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d106      	bne.n	80039cc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f910 	bl	8003be8 <xEventGroupCreateStatic>
 80039c8:	61f8      	str	r0, [r7, #28]
 80039ca:	e005      	b.n	80039d8 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80039d2:	f000 f940 	bl	8003c56 <xEventGroupCreate>
 80039d6:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80039d8:	69fb      	ldr	r3, [r7, #28]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000334 	.word	0x20000334

080039e8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <osEventFlagsSet+0x1e>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8003a06:	f06f 0303 	mvn.w	r3, #3
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e03a      	b.n	8003a84 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0e:	f3ef 8305 	mrs	r3, IPSR
 8003a12:	617b      	str	r3, [r7, #20]
  return(result);
 8003a14:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	613b      	str	r3, [r7, #16]
  return(result);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <osEventFlagsSet+0x52>
 8003a26:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <osEventFlagsSet+0xa8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d123      	bne.n	8003a76 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01d      	beq.n	8003a76 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	461a      	mov	r2, r3
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	69b8      	ldr	r0, [r7, #24]
 8003a48:	f000 faa8 	bl	8003f9c <xEventGroupSetBitsFromISR>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8003a52:	f06f 0302 	mvn.w	r3, #2
 8003a56:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003a58:	e013      	b.n	8003a82 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00e      	beq.n	8003a82 <osEventFlagsSet+0x9a>
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <osEventFlagsSet+0xac>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003a74:	e005      	b.n	8003a82 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	69b8      	ldr	r0, [r7, #24]
 8003a7a:	f000 f9d5 	bl	8003e28 <xEventGroupSetBits>
 8003a7e:	61f8      	str	r0, [r7, #28]
 8003a80:	e000      	b.n	8003a84 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003a82:	bf00      	nop
  }

  return (rflags);
 8003a84:	69fb      	ldr	r3, [r7, #28]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000334 	.word	0x20000334
 8003a94:	e000ed04 	.word	0xe000ed04

08003a98 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08e      	sub	sp, #56	; 0x38
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <osEventFlagsWait+0x22>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8003aba:	f06f 0303 	mvn.w	r3, #3
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	e059      	b.n	8003b76 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac2:	f3ef 8305 	mrs	r3, IPSR
 8003ac6:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ace:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <osEventFlagsWait+0x56>
 8003ada:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <osEventFlagsWait+0xe8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d109      	bne.n	8003af6 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ae6:	617b      	str	r3, [r7, #20]
  return(result);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8003aee:	f06f 0305 	mvn.w	r3, #5
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	e03f      	b.n	8003b76 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b04:	e001      	b.n	8003b0a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b18:	e001      	b.n	8003b1e <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	6a38      	ldr	r0, [r7, #32]
 8003b2a:	f000 f8af 	bl	8003c8c <xEventGroupWaitBits>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d019      	beq.n	8003b76 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8003b48:	f06f 0301 	mvn.w	r3, #1
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	e012      	b.n	8003b76 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003b50:	f06f 0302 	mvn.w	r3, #2
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	e00e      	b.n	8003b76 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8003b68:	f06f 0301 	mvn.w	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	e002      	b.n	8003b76 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003b70:	f06f 0302 	mvn.w	r3, #2
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3730      	adds	r7, #48	; 0x30
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000334 	.word	0x20000334

08003b84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a06      	ldr	r2, [pc, #24]	; (8003bac <vApplicationGetIdleTaskMemory+0x28>)
 8003b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	601a      	str	r2, [r3, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	20000338 	.word	0x20000338
 8003bb0:	200003f4 	.word	0x200003f4

08003bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a07      	ldr	r2, [pc, #28]	; (8003be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <vApplicationGetTimerTaskMemory+0x30>)
 8003bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bd2:	601a      	str	r2, [r3, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	200005f4 	.word	0x200005f4
 8003be4:	200006b0 	.word	0x200006b0

08003be8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c08:	bf00      	nop
 8003c0a:	e7fe      	b.n	8003c0a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d00a      	beq.n	8003c2c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60fb      	str	r3, [r7, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f9bf 	bl	8003fc4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8003c4c:	697b      	ldr	r3, [r7, #20]
	}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8003c5c:	2020      	movs	r0, #32
 8003c5e:	f002 fc45 	bl	80064ec <pvPortMalloc>
 8003c62:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f9a5 	bl	8003fc4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8003c80:	687b      	ldr	r3, [r7, #4]
	}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b090      	sub	sp, #64	; 0x40
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xEventGroupWaitBits+0x36>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	623b      	str	r3, [r7, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	61fb      	str	r3, [r7, #28]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <xEventGroupWaitBits+0x72>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	61bb      	str	r3, [r7, #24]
}
 8003cfa:	bf00      	nop
 8003cfc:	e7fe      	b.n	8003cfc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cfe:	f001 fdd9 	bl	80058b4 <xTaskGetSchedulerState>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <xEventGroupWaitBits+0x82>
 8003d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <xEventGroupWaitBits+0x86>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xEventGroupWaitBits+0x88>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	617b      	str	r3, [r7, #20]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003d2e:	f001 f931 	bl	8004f94 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d3e:	f000 f90b 	bl	8003f58 <prvTestWaitCondition>
 8003d42:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d028      	beq.n	8003daa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	401a      	ands	r2, r3
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e020      	b.n	8003daa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	633b      	str	r3, [r7, #48]	; 0x30
 8003d76:	e018      	b.n	8003daa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d84:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	1d18      	adds	r0, r3, #4
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da0:	4619      	mov	r1, r3
 8003da2:	f001 faf7 	bl	8005394 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003daa:	f001 f901 	bl	8004fb0 <xTaskResumeAll>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d031      	beq.n	8003e1a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d107      	bne.n	8003dcc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <xEventGroupWaitBits+0x198>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003dcc:	f001 fdfe 	bl	80059cc <uxTaskResetEventItemValue>
 8003dd0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11a      	bne.n	8003e12 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003ddc:	f002 fa86 	bl	80062ec <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dec:	f000 f8b4 	bl	8003f58 <prvTestWaitCondition>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	401a      	ands	r2, r3
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003e0e:	f002 fa9d 	bl	800634c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3740      	adds	r7, #64	; 0x40
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08e      	sub	sp, #56	; 0x38
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003e32:	2300      	movs	r3, #0
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <xEventGroupSetBits+0x32>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	613b      	str	r3, [r7, #16]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <xEventGroupSetBits+0x52>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60fb      	str	r3, [r7, #12]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	3308      	adds	r3, #8
 8003e84:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003e86:	f001 f885 	bl	8004f94 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003e9c:	e03c      	b.n	8003f18 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003eb4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ebc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d108      	bne.n	8003eda <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed8:	e008      	b.n	8003eec <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d101      	bne.n	8003eec <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f10:	f001 fb0c 	bl	800552c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1be      	bne.n	8003e9e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	43db      	mvns	r3, r3
 8003f28:	401a      	ands	r2, r3
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003f2e:	f001 f83f 	bl	8004fb0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	681b      	ldr	r3, [r3, #0]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3738      	adds	r7, #56	; 0x38
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff6c 	bl	8003e28 <xEventGroupSetBits>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e007      	b.n	8003f8e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d101      	bne.n	8003f8e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003f8e:	697b      	ldr	r3, [r7, #20]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
	...

08003f9c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	4804      	ldr	r0, [pc, #16]	; (8003fc0 <xEventGroupSetBitsFromISR+0x24>)
 8003fb0:	f002 f88a 	bl	80060c8 <xTimerPendFunctionCallFromISR>
 8003fb4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003fb6:	697b      	ldr	r3, [r7, #20]
	}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	08003f3f 	.word	0x08003f3f

08003fc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f103 0208 	add.w	r2, r3, #8
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f103 0208 	add.w	r2, r3, #8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f103 0208 	add.w	r2, r3, #8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004076:	d103      	bne.n	8004080 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e00c      	b.n	800409a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3308      	adds	r3, #8
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e002      	b.n	800408e <vListInsert+0x2e>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	429a      	cmp	r2, r3
 8004098:	d2f6      	bcs.n	8004088 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6852      	ldr	r2, [r2, #4]
 80040f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d103      	bne.n	8004104 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1e5a      	subs	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
	...

08004124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xQueueGenericReset+0x2a>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60bb      	str	r3, [r7, #8]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800414e:	f002 f8cd 	bl	80062ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	441a      	add	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	3b01      	subs	r3, #1
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	22ff      	movs	r2, #255	; 0xff
 800419a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d114      	bne.n	80041ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01a      	beq.n	80041e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3310      	adds	r3, #16
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 f957 	bl	8005464 <xTaskRemoveFromEventList>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d012      	beq.n	80041e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <xQueueGenericReset+0xcc>)
 80041be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	e009      	b.n	80041e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3310      	adds	r3, #16
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fef6 	bl	8003fc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fef1 	bl	8003fc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041e2:	f002 f8b3 	bl	800634c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041e6:	2301      	movs	r3, #1
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <xQueueGenericCreateStatic+0x52>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <xQueueGenericCreateStatic+0x56>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <xQueueGenericCreateStatic+0x58>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	623b      	str	r3, [r7, #32]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <xQueueGenericCreateStatic+0x7e>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <xQueueGenericCreateStatic+0x82>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <xQueueGenericCreateStatic+0x84>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	61fb      	str	r3, [r7, #28]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004292:	2350      	movs	r3, #80	; 0x50
 8004294:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b50      	cmp	r3, #80	; 0x50
 800429a:	d00a      	beq.n	80042b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	61bb      	str	r3, [r7, #24]
}
 80042ae:	bf00      	nop
 80042b0:	e7fe      	b.n	80042b0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00d      	beq.n	80042d8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f805 	bl	80042e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042da:	4618      	mov	r0, r3
 80042dc:	3730      	adds	r7, #48	; 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e002      	b.n	8004304 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004310:	2101      	movs	r1, #1
 8004312:	69b8      	ldr	r0, [r7, #24]
 8004314:	f7ff ff06 	bl	8004124 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	; 0x38
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004336:	2300      	movs	r3, #0
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <xQueueGenericSend+0x32>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <xQueueGenericSend+0x40>
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <xQueueGenericSend+0x44>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <xQueueGenericSend+0x46>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <xQueueGenericSend+0x60>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d103      	bne.n	8004396 <xQueueGenericSend+0x6e>
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <xQueueGenericSend+0x72>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <xQueueGenericSend+0x74>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	623b      	str	r3, [r7, #32]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043b6:	f001 fa7d 	bl	80058b4 <xTaskGetSchedulerState>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <xQueueGenericSend+0x9e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <xQueueGenericSend+0xa2>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <xQueueGenericSend+0xa4>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	61fb      	str	r3, [r7, #28]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043e6:	f001 ff81 	bl	80062ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <xQueueGenericSend+0xd4>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d129      	bne.n	8004450 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004402:	f000 fa07 	bl	8004814 <prvCopyDataToQueue>
 8004406:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	4618      	mov	r0, r3
 8004416:	f001 f825 	bl	8005464 <xTaskRemoveFromEventList>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004420:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <xQueueGenericSend+0x1f8>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	e00a      	b.n	8004448 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004438:	4b39      	ldr	r3, [pc, #228]	; (8004520 <xQueueGenericSend+0x1f8>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004448:	f001 ff80 	bl	800634c <vPortExitCritical>
				return pdPASS;
 800444c:	2301      	movs	r3, #1
 800444e:	e063      	b.n	8004518 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004456:	f001 ff79 	bl	800634c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800445a:	2300      	movs	r3, #0
 800445c:	e05c      	b.n	8004518 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	4618      	mov	r0, r3
 800446a:	f001 f8c1 	bl	80055f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800446e:	2301      	movs	r3, #1
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004472:	f001 ff6b 	bl	800634c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004476:	f000 fd8d 	bl	8004f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800447a:	f001 ff37 	bl	80062ec <vPortEnterCritical>
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004484:	b25b      	sxtb	r3, r3
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448a:	d103      	bne.n	8004494 <xQueueGenericSend+0x16c>
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800449a:	b25b      	sxtb	r3, r3
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a0:	d103      	bne.n	80044aa <xQueueGenericSend+0x182>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044aa:	f001 ff4f 	bl	800634c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ae:	1d3a      	adds	r2, r7, #4
 80044b0:	f107 0314 	add.w	r3, r7, #20
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 f8b0 	bl	800561c <xTaskCheckForTimeOut>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d124      	bne.n	800450c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c4:	f000 fa9e 	bl	8004a04 <prvIsQueueFull>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d018      	beq.n	8004500 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	3310      	adds	r3, #16
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ff38 	bl	800534c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044de:	f000 fa29 	bl	8004934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044e2:	f000 fd65 	bl	8004fb0 <xTaskResumeAll>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f47f af7c 	bne.w	80043e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <xQueueGenericSend+0x1f8>)
 80044f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	e772      	b.n	80043e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004502:	f000 fa17 	bl	8004934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004506:	f000 fd53 	bl	8004fb0 <xTaskResumeAll>
 800450a:	e76c      	b.n	80043e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800450c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800450e:	f000 fa11 	bl	8004934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004512:	f000 fd4d 	bl	8004fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004516:	2300      	movs	r3, #0
		}
	}
}
 8004518:	4618      	mov	r0, r3
 800451a:	3738      	adds	r7, #56	; 0x38
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	; 0x38
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <xQueueGenericSendFromISR+0x3c>
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <xQueueGenericSendFromISR+0x40>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <xQueueGenericSendFromISR+0x42>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	623b      	str	r3, [r7, #32]
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d103      	bne.n	800458e <xQueueGenericSendFromISR+0x6a>
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <xQueueGenericSendFromISR+0x6e>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <xQueueGenericSendFromISR+0x70>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	61fb      	str	r3, [r7, #28]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045ae:	f001 ff5f 	bl	8006470 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045b2:	f3ef 8211 	mrs	r2, BASEPRI
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61ba      	str	r2, [r7, #24]
 80045c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <xQueueGenericSendFromISR+0xbc>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d12c      	bne.n	800463a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045f0:	f000 f910 	bl	8004814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045fc:	d112      	bne.n	8004624 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	3324      	adds	r3, #36	; 0x24
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ff2a 	bl	8005464 <xTaskRemoveFromEventList>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e007      	b.n	8004634 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004628:	3301      	adds	r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	b25a      	sxtb	r2, r3
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004634:	2301      	movs	r3, #1
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004638:	e001      	b.n	800463e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800463a:	2300      	movs	r3, #0
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004648:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800464c:	4618      	mov	r0, r3
 800464e:	3738      	adds	r7, #56	; 0x38
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004660:	2300      	movs	r3, #0
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <xQueueReceive+0x30>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	623b      	str	r3, [r7, #32]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <xQueueReceive+0x3e>
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <xQueueReceive+0x42>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueReceive+0x44>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueReceive+0x5e>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	61fb      	str	r3, [r7, #28]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046b2:	f001 f8ff 	bl	80058b4 <xTaskGetSchedulerState>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <xQueueReceive+0x6e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <xQueueReceive+0x72>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <xQueueReceive+0x74>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xQueueReceive+0x8e>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	61bb      	str	r3, [r7, #24]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046e2:	f001 fe03 	bl	80062ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01f      	beq.n	8004732 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f6:	f000 f8f7 	bl	80048e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1e5a      	subs	r2, r3, #1
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00f      	beq.n	800472a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	3310      	adds	r3, #16
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fea8 	bl	8005464 <xTaskRemoveFromEventList>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800471a:	4b3d      	ldr	r3, [pc, #244]	; (8004810 <xQueueReceive+0x1bc>)
 800471c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800472a:	f001 fe0f 	bl	800634c <vPortExitCritical>
				return pdPASS;
 800472e:	2301      	movs	r3, #1
 8004730:	e069      	b.n	8004806 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004738:	f001 fe08 	bl	800634c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800473c:	2300      	movs	r3, #0
 800473e:	e062      	b.n	8004806 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004746:	f107 0310 	add.w	r3, r7, #16
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ff50 	bl	80055f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004750:	2301      	movs	r3, #1
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004754:	f001 fdfa 	bl	800634c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004758:	f000 fc1c 	bl	8004f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800475c:	f001 fdc6 	bl	80062ec <vPortEnterCritical>
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004766:	b25b      	sxtb	r3, r3
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800476c:	d103      	bne.n	8004776 <xQueueReceive+0x122>
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477c:	b25b      	sxtb	r3, r3
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004782:	d103      	bne.n	800478c <xQueueReceive+0x138>
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478c:	f001 fdde 	bl	800634c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004790:	1d3a      	adds	r2, r7, #4
 8004792:	f107 0310 	add.w	r3, r7, #16
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f000 ff3f 	bl	800561c <xTaskCheckForTimeOut>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d123      	bne.n	80047ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a6:	f000 f917 	bl	80049d8 <prvIsQueueEmpty>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d017      	beq.n	80047e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	3324      	adds	r3, #36	; 0x24
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fdc7 	bl	800534c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c0:	f000 f8b8 	bl	8004934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047c4:	f000 fbf4 	bl	8004fb0 <xTaskResumeAll>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d189      	bne.n	80046e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <xQueueReceive+0x1bc>)
 80047d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	e780      	b.n	80046e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e2:	f000 f8a7 	bl	8004934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047e6:	f000 fbe3 	bl	8004fb0 <xTaskResumeAll>
 80047ea:	e77a      	b.n	80046e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ee:	f000 f8a1 	bl	8004934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047f2:	f000 fbdd 	bl	8004fb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f8:	f000 f8ee 	bl	80049d8 <prvIsQueueEmpty>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f43f af6f 	beq.w	80046e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004804:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004806:	4618      	mov	r0, r3
 8004808:	3730      	adds	r7, #48	; 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10d      	bne.n	800484e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d14d      	bne.n	80048d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f856 	bl	80058f0 <xTaskPriorityDisinherit>
 8004844:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	e043      	b.n	80048d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d119      	bne.n	8004888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6898      	ldr	r0, [r3, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	461a      	mov	r2, r3
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	f002 f842 	bl	80068e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d32b      	bcc.n	80048d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	609a      	str	r2, [r3, #8]
 8004886:	e026      	b.n	80048d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68d8      	ldr	r0, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	461a      	mov	r2, r3
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	f002 f828 	bl	80068e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	425b      	negs	r3, r3
 80048a2:	441a      	add	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d207      	bcs.n	80048c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	425b      	negs	r3, r3
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d105      	bne.n	80048d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	441a      	add	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d303      	bcc.n	800491c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68d9      	ldr	r1, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	461a      	mov	r2, r3
 8004926:	6838      	ldr	r0, [r7, #0]
 8004928:	f001 ffde 	bl	80068e8 <memcpy>
	}
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800493c:	f001 fcd6 	bl	80062ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004948:	e011      	b.n	800496e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d012      	beq.n	8004978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3324      	adds	r3, #36	; 0x24
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fd84 	bl	8005464 <xTaskRemoveFromEventList>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004962:	f000 febd 	bl	80056e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	3b01      	subs	r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	dce9      	bgt.n	800494a <prvUnlockQueue+0x16>
 8004976:	e000      	b.n	800497a <prvUnlockQueue+0x46>
					break;
 8004978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004982:	f001 fce3 	bl	800634c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004986:	f001 fcb1 	bl	80062ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004992:	e011      	b.n	80049b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d012      	beq.n	80049c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3310      	adds	r3, #16
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fd5f 	bl	8005464 <xTaskRemoveFromEventList>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049ac:	f000 fe98 	bl	80056e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dce9      	bgt.n	8004994 <prvUnlockQueue+0x60>
 80049c0:	e000      	b.n	80049c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049cc:	f001 fcbe 	bl	800634c <vPortExitCritical>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049e0:	f001 fc84 	bl	80062ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e001      	b.n	80049f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049f6:	f001 fca9 	bl	800634c <vPortExitCritical>

	return xReturn;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a0c:	f001 fc6e 	bl	80062ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d102      	bne.n	8004a22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e001      	b.n	8004a26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a26:	f001 fc91 	bl	800634c <vPortExitCritical>

	return xReturn;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e014      	b.n	8004a6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a44:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <vQueueAddToRegistry+0x4c>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a50:	490b      	ldr	r1, [pc, #44]	; (8004a80 <vQueueAddToRegistry+0x4c>)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <vQueueAddToRegistry+0x4c>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a66:	e006      	b.n	8004a76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b07      	cmp	r3, #7
 8004a72:	d9e7      	bls.n	8004a44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	20000ab0 	.word	0x20000ab0

08004a84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a94:	f001 fc2a 	bl	80062ec <vPortEnterCritical>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa4:	d103      	bne.n	8004aae <vQueueWaitForMessageRestricted+0x2a>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aba:	d103      	bne.n	8004ac4 <vQueueWaitForMessageRestricted+0x40>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac4:	f001 fc42 	bl	800634c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3324      	adds	r3, #36	; 0x24
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fc97 	bl	800540c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f7ff ff28 	bl	8004934 <prvUnlockQueue>
	}
 8004ae4:	bf00      	nop
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	; 0x38
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	623b      	str	r3, [r7, #32]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	61fb      	str	r3, [r7, #28]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b32:	23bc      	movs	r3, #188	; 0xbc
 8004b34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2bbc      	cmp	r3, #188	; 0xbc
 8004b3a:	d00a      	beq.n	8004b52 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61bb      	str	r3, [r7, #24]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01e      	beq.n	8004b96 <xTaskCreateStatic+0xaa>
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01b      	beq.n	8004b96 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b70:	2300      	movs	r3, #0
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	9302      	str	r3, [sp, #8]
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f851 	bl	8004c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b90:	f000 f8ec 	bl	8004d6c <prvAddNewTaskToReadyList>
 8004b94:	e001      	b.n	8004b9a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b9a:	697b      	ldr	r3, [r7, #20]
	}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3728      	adds	r7, #40	; 0x28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08c      	sub	sp, #48	; 0x30
 8004ba8:	af04      	add	r7, sp, #16
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 fc97 	bl	80064ec <pvPortMalloc>
 8004bbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00e      	beq.n	8004be4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004bc6:	20bc      	movs	r0, #188	; 0xbc
 8004bc8:	f001 fc90 	bl	80064ec <pvPortMalloc>
 8004bcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8004bda:	e005      	b.n	8004be8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	f001 fd49 	bl	8006674 <vPortFree>
 8004be2:	e001      	b.n	8004be8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9303      	str	r3, [sp, #12]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	9302      	str	r3, [sp, #8]
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f80f 	bl	8004c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c12:	69f8      	ldr	r0, [r7, #28]
 8004c14:	f000 f8aa 	bl	8004d6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e002      	b.n	8004c24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c24:	69bb      	ldr	r3, [r7, #24]
	}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	21a5      	movs	r1, #165	; 0xa5
 8004c4a:	f001 fe5b 	bl	8006904 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	617b      	str	r3, [r7, #20]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e012      	b.n	8004cb4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3334      	adds	r3, #52	; 0x34
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d9e9      	bls.n	8004c8e <prvInitialiseNewTask+0x5e>
 8004cba:	e000      	b.n	8004cbe <prvInitialiseNewTask+0x8e>
		{
			break;
 8004cbc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	2b37      	cmp	r3, #55	; 0x37
 8004cca:	d901      	bls.n	8004cd0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ccc:	2337      	movs	r3, #55	; 0x37
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff f98b 	bl	8004002 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	3318      	adds	r3, #24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff f986 	bl	8004002 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	3354      	adds	r3, #84	; 0x54
 8004d20:	2260      	movs	r2, #96	; 0x60
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 fded 	bl	8006904 <memset>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <prvInitialiseNewTask+0x130>)
 8004d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <prvInitialiseNewTask+0x134>)
 8004d34:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <prvInitialiseNewTask+0x138>)
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	69b8      	ldr	r0, [r7, #24]
 8004d42:	f001 f9e1 	bl	8006108 <pxPortInitialiseStack>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d58:	bf00      	nop
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	08006c04 	.word	0x08006c04
 8004d64:	08006c24 	.word	0x08006c24
 8004d68:	08006be4 	.word	0x08006be4

08004d6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d74:	f001 faba 	bl	80062ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <prvAddNewTaskToReadyList+0xc4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <prvAddNewTaskToReadyList+0xc4>)
 8004d80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d82:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <prvAddNewTaskToReadyList+0xc4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d110      	bne.n	8004dba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d98:	f000 fcc6 	bl	8005728 <prvInitialiseTaskLists>
 8004d9c:	e00d      	b.n	8004dba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <prvAddNewTaskToReadyList+0xcc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004da6:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d802      	bhi.n	8004dba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004db4:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <prvAddNewTaskToReadyList+0xd0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <prvAddNewTaskToReadyList+0xd0>)
 8004dc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <prvAddNewTaskToReadyList+0xd0>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <prvAddNewTaskToReadyList+0xd4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d903      	bls.n	8004de0 <prvAddNewTaskToReadyList+0x74>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <prvAddNewTaskToReadyList+0xd4>)
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <prvAddNewTaskToReadyList+0xd8>)
 8004dee:	441a      	add	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f7ff f90f 	bl	800401a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dfc:	f001 faa6 	bl	800634c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <prvAddNewTaskToReadyList+0xcc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00e      	beq.n	8004e26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d207      	bcs.n	8004e26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvAddNewTaskToReadyList+0xdc>)
 8004e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000fc4 	.word	0x20000fc4
 8004e34:	20000af0 	.word	0x20000af0
 8004e38:	20000fd0 	.word	0x20000fd0
 8004e3c:	20000fe0 	.word	0x20000fe0
 8004e40:	20000fcc 	.word	0x20000fcc
 8004e44:	20000af4 	.word	0x20000af4
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <vTaskDelay+0x60>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <vTaskDelay+0x30>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60bb      	str	r3, [r7, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e7c:	f000 f88a 	bl	8004f94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e80:	2100      	movs	r1, #0
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fdba 	bl	80059fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e88:	f000 f892 	bl	8004fb0 <xTaskResumeAll>
 8004e8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <vTaskDelay+0x64>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000fec 	.word	0x20000fec
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ec2:	463a      	mov	r2, r7
 8004ec4:	1d39      	adds	r1, r7, #4
 8004ec6:	f107 0308 	add.w	r3, r7, #8
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fe5a 	bl	8003b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	9202      	str	r2, [sp, #8]
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	2300      	movs	r3, #0
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	4924      	ldr	r1, [pc, #144]	; (8004f74 <vTaskStartScheduler+0xc0>)
 8004ee4:	4824      	ldr	r0, [pc, #144]	; (8004f78 <vTaskStartScheduler+0xc4>)
 8004ee6:	f7ff fe01 	bl	8004aec <xTaskCreateStatic>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4a23      	ldr	r2, [pc, #140]	; (8004f7c <vTaskStartScheduler+0xc8>)
 8004eee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <vTaskStartScheduler+0xc8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e001      	b.n	8004f02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d102      	bne.n	8004f0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f08:	f000 fdcc 	bl	8005aa4 <xTimerCreateTimerTask>
 8004f0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d11b      	bne.n	8004f4c <vTaskStartScheduler+0x98>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	613b      	str	r3, [r7, #16]
}
 8004f26:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <vTaskStartScheduler+0xcc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3354      	adds	r3, #84	; 0x54
 8004f2e:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <vTaskStartScheduler+0xd0>)
 8004f30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <vTaskStartScheduler+0xd4>)
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f3a:	4b14      	ldr	r3, [pc, #80]	; (8004f8c <vTaskStartScheduler+0xd8>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <vTaskStartScheduler+0xdc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f46:	f001 f95f 	bl	8006208 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f4a:	e00e      	b.n	8004f6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f52:	d10a      	bne.n	8004f6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	60fb      	str	r3, [r7, #12]
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <vTaskStartScheduler+0xb4>
}
 8004f6a:	bf00      	nop
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	08006af4 	.word	0x08006af4
 8004f78:	080056f9 	.word	0x080056f9
 8004f7c:	20000fe8 	.word	0x20000fe8
 8004f80:	20000af0 	.word	0x20000af0
 8004f84:	20000010 	.word	0x20000010
 8004f88:	20000fe4 	.word	0x20000fe4
 8004f8c:	20000fd0 	.word	0x20000fd0
 8004f90:	20000fc8 	.word	0x20000fc8

08004f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <vTaskSuspendAll+0x18>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	4a03      	ldr	r2, [pc, #12]	; (8004fac <vTaskSuspendAll+0x18>)
 8004fa0:	6013      	str	r3, [r2, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000fec 	.word	0x20000fec

08004fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fbe:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <xTaskResumeAll+0x118>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <xTaskResumeAll+0x2c>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	603b      	str	r3, [r7, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fdc:	f001 f986 	bl	80062ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fe0:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <xTaskResumeAll+0x118>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	4a38      	ldr	r2, [pc, #224]	; (80050c8 <xTaskResumeAll+0x118>)
 8004fe8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fea:	4b37      	ldr	r3, [pc, #220]	; (80050c8 <xTaskResumeAll+0x118>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d162      	bne.n	80050b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ff2:	4b36      	ldr	r3, [pc, #216]	; (80050cc <xTaskResumeAll+0x11c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d05e      	beq.n	80050b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ffa:	e02f      	b.n	800505c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ffc:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <xTaskResumeAll+0x120>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3318      	adds	r3, #24
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff f861 	bl	80040d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3304      	adds	r3, #4
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff f85c 	bl	80040d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501c:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <xTaskResumeAll+0x124>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d903      	bls.n	800502c <xTaskResumeAll+0x7c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <xTaskResumeAll+0x124>)
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4a27      	ldr	r2, [pc, #156]	; (80050d8 <xTaskResumeAll+0x128>)
 800503a:	441a      	add	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7fe ffe9 	bl	800401a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	4b23      	ldr	r3, [pc, #140]	; (80050dc <xTaskResumeAll+0x12c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005056:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <xTaskResumeAll+0x130>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <xTaskResumeAll+0x120>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1cb      	bne.n	8004ffc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800506a:	f000 fbff 	bl	800586c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800506e:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <xTaskResumeAll+0x134>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800507a:	f000 f845 	bl	8005108 <xTaskIncrementTick>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005084:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <xTaskResumeAll+0x130>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f1      	bne.n	800507a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <xTaskResumeAll+0x134>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <xTaskResumeAll+0x130>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <xTaskResumeAll+0x138>)
 80050aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050b8:	f001 f948 	bl	800634c <vPortExitCritical>

	return xAlreadyYielded;
 80050bc:	68bb      	ldr	r3, [r7, #8]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000fec 	.word	0x20000fec
 80050cc:	20000fc4 	.word	0x20000fc4
 80050d0:	20000f84 	.word	0x20000f84
 80050d4:	20000fcc 	.word	0x20000fcc
 80050d8:	20000af4 	.word	0x20000af4
 80050dc:	20000af0 	.word	0x20000af0
 80050e0:	20000fd8 	.word	0x20000fd8
 80050e4:	20000fd4 	.word	0x20000fd4
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050f2:	4b04      	ldr	r3, [pc, #16]	; (8005104 <xTaskGetTickCount+0x18>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050f8:	687b      	ldr	r3, [r7, #4]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	20000fc8 	.word	0x20000fc8

08005108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005112:	4b51      	ldr	r3, [pc, #324]	; (8005258 <xTaskIncrementTick+0x150>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 808e 	bne.w	8005238 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800511c:	4b4f      	ldr	r3, [pc, #316]	; (800525c <xTaskIncrementTick+0x154>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005124:	4a4d      	ldr	r2, [pc, #308]	; (800525c <xTaskIncrementTick+0x154>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d120      	bne.n	8005172 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005130:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <xTaskIncrementTick+0x158>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <xTaskIncrementTick+0x48>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	603b      	str	r3, [r7, #0]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <xTaskIncrementTick+0x46>
 8005150:	4b43      	ldr	r3, [pc, #268]	; (8005260 <xTaskIncrementTick+0x158>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	4b43      	ldr	r3, [pc, #268]	; (8005264 <xTaskIncrementTick+0x15c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a41      	ldr	r2, [pc, #260]	; (8005260 <xTaskIncrementTick+0x158>)
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	4a41      	ldr	r2, [pc, #260]	; (8005264 <xTaskIncrementTick+0x15c>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4b40      	ldr	r3, [pc, #256]	; (8005268 <xTaskIncrementTick+0x160>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <xTaskIncrementTick+0x160>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	f000 fb7d 	bl	800586c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005172:	4b3e      	ldr	r3, [pc, #248]	; (800526c <xTaskIncrementTick+0x164>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	429a      	cmp	r2, r3
 800517a:	d34e      	bcc.n	800521a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800517c:	4b38      	ldr	r3, [pc, #224]	; (8005260 <xTaskIncrementTick+0x158>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <xTaskIncrementTick+0x82>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xTaskIncrementTick+0x84>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005190:	4b36      	ldr	r3, [pc, #216]	; (800526c <xTaskIncrementTick+0x164>)
 8005192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005196:	601a      	str	r2, [r3, #0]
					break;
 8005198:	e03f      	b.n	800521a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800519a:	4b31      	ldr	r3, [pc, #196]	; (8005260 <xTaskIncrementTick+0x158>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d203      	bcs.n	80051ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051b2:	4a2e      	ldr	r2, [pc, #184]	; (800526c <xTaskIncrementTick+0x164>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6013      	str	r3, [r2, #0]
						break;
 80051b8:	e02f      	b.n	800521a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	3304      	adds	r3, #4
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe ff86 	bl	80040d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	3318      	adds	r3, #24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe ff7d 	bl	80040d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	4b25      	ldr	r3, [pc, #148]	; (8005270 <xTaskIncrementTick+0x168>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d903      	bls.n	80051ea <xTaskIncrementTick+0xe2>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	4a22      	ldr	r2, [pc, #136]	; (8005270 <xTaskIncrementTick+0x168>)
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <xTaskIncrementTick+0x16c>)
 80051f8:	441a      	add	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7fe ff0a 	bl	800401a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <xTaskIncrementTick+0x170>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	429a      	cmp	r2, r3
 8005212:	d3b3      	bcc.n	800517c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005218:	e7b0      	b.n	800517c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800521a:	4b17      	ldr	r3, [pc, #92]	; (8005278 <xTaskIncrementTick+0x170>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005220:	4914      	ldr	r1, [pc, #80]	; (8005274 <xTaskIncrementTick+0x16c>)
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d907      	bls.n	8005242 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e004      	b.n	8005242 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <xTaskIncrementTick+0x174>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	4a0f      	ldr	r2, [pc, #60]	; (800527c <xTaskIncrementTick+0x174>)
 8005240:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <xTaskIncrementTick+0x178>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800524a:	2301      	movs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800524e:	697b      	ldr	r3, [r7, #20]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000fec 	.word	0x20000fec
 800525c:	20000fc8 	.word	0x20000fc8
 8005260:	20000f7c 	.word	0x20000f7c
 8005264:	20000f80 	.word	0x20000f80
 8005268:	20000fdc 	.word	0x20000fdc
 800526c:	20000fe4 	.word	0x20000fe4
 8005270:	20000fcc 	.word	0x20000fcc
 8005274:	20000af4 	.word	0x20000af4
 8005278:	20000af0 	.word	0x20000af0
 800527c:	20000fd4 	.word	0x20000fd4
 8005280:	20000fd8 	.word	0x20000fd8

08005284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800528a:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <vTaskSwitchContext+0xb0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005292:	4b29      	ldr	r3, [pc, #164]	; (8005338 <vTaskSwitchContext+0xb4>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005298:	e046      	b.n	8005328 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800529a:	4b27      	ldr	r3, [pc, #156]	; (8005338 <vTaskSwitchContext+0xb4>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052a0:	4b26      	ldr	r3, [pc, #152]	; (800533c <vTaskSwitchContext+0xb8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e010      	b.n	80052ca <vTaskSwitchContext+0x46>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <vTaskSwitchContext+0x3e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	491d      	ldr	r1, [pc, #116]	; (8005340 <vTaskSwitchContext+0xbc>)
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0e4      	beq.n	80052a8 <vTaskSwitchContext+0x24>
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a15      	ldr	r2, [pc, #84]	; (8005340 <vTaskSwitchContext+0xbc>)
 80052ea:	4413      	add	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3308      	adds	r3, #8
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <vTaskSwitchContext+0x8a>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <vTaskSwitchContext+0xc0>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4a08      	ldr	r2, [pc, #32]	; (800533c <vTaskSwitchContext+0xb8>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <vTaskSwitchContext+0xc0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3354      	adds	r3, #84	; 0x54
 8005324:	4a08      	ldr	r2, [pc, #32]	; (8005348 <vTaskSwitchContext+0xc4>)
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000fec 	.word	0x20000fec
 8005338:	20000fd8 	.word	0x20000fd8
 800533c:	20000fcc 	.word	0x20000fcc
 8005340:	20000af4 	.word	0x20000af4
 8005344:	20000af0 	.word	0x20000af0
 8005348:	20000010 	.word	0x20000010

0800534c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60fb      	str	r3, [r7, #12]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <vTaskPlaceOnEventList+0x44>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3318      	adds	r3, #24
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fe fe70 	bl	8004060 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005380:	2101      	movs	r1, #1
 8005382:	6838      	ldr	r0, [r7, #0]
 8005384:	f000 fb3a 	bl	80059fc <prvAddCurrentTaskToDelayedList>
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000af0 	.word	0x20000af0

08005394 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	617b      	str	r3, [r7, #20]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <vTaskPlaceOnUnorderedEventList+0x70>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	613b      	str	r3, [r7, #16]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <vTaskPlaceOnUnorderedEventList+0x74>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <vTaskPlaceOnUnorderedEventList+0x74>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3318      	adds	r3, #24
 80053ec:	4619      	mov	r1, r3
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7fe fe13 	bl	800401a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053f4:	2101      	movs	r1, #1
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fb00 	bl	80059fc <prvAddCurrentTaskToDelayedList>
}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000fec 	.word	0x20000fec
 8005408:	20000af0 	.word	0x20000af0

0800540c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <vTaskPlaceOnEventListRestricted+0x54>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3318      	adds	r3, #24
 800543a:	4619      	mov	r1, r3
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7fe fdec 	bl	800401a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800544c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	68b8      	ldr	r0, [r7, #8]
 8005452:	f000 fad3 	bl	80059fc <prvAddCurrentTaskToDelayedList>
	}
 8005456:	bf00      	nop
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000af0 	.word	0x20000af0

08005464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	60fb      	str	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	3318      	adds	r3, #24
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe fe1b 	bl	80040d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549a:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <xTaskRemoveFromEventList+0xb0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d11d      	bne.n	80054de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fe12 	bl	80040d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <xTaskRemoveFromEventList+0xb4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d903      	bls.n	80054c0 <xTaskRemoveFromEventList+0x5c>
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a16      	ldr	r2, [pc, #88]	; (8005518 <xTaskRemoveFromEventList+0xb4>)
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4a13      	ldr	r2, [pc, #76]	; (800551c <xTaskRemoveFromEventList+0xb8>)
 80054ce:	441a      	add	r2, r3
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f7fe fd9f 	bl	800401a <vListInsertEnd>
 80054dc:	e005      	b.n	80054ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	3318      	adds	r3, #24
 80054e2:	4619      	mov	r1, r3
 80054e4:	480e      	ldr	r0, [pc, #56]	; (8005520 <xTaskRemoveFromEventList+0xbc>)
 80054e6:	f7fe fd98 	bl	800401a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <xTaskRemoveFromEventList+0xc0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d905      	bls.n	8005504 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <xTaskRemoveFromEventList+0xc4>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e001      	b.n	8005508 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005508:	697b      	ldr	r3, [r7, #20]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000fec 	.word	0x20000fec
 8005518:	20000fcc 	.word	0x20000fcc
 800551c:	20000af4 	.word	0x20000af4
 8005520:	20000f84 	.word	0x20000f84
 8005524:	20000af0 	.word	0x20000af0
 8005528:	20000fd8 	.word	0x20000fd8

0800552c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005536:	4b29      	ldr	r3, [pc, #164]	; (80055dc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	613b      	str	r3, [r7, #16]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60fb      	str	r3, [r7, #12]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fe fda5 	bl	80040d0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3304      	adds	r3, #4
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fda0 	bl	80040d0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d903      	bls.n	80055a4 <vTaskRemoveFromUnorderedEventList+0x78>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80055b2:	441a      	add	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7fe fd2d 	bl	800401a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d902      	bls.n	80055d4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <vTaskRemoveFromUnorderedEventList+0xc0>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
	}
}
 80055d4:	bf00      	nop
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20000fec 	.word	0x20000fec
 80055e0:	20000fcc 	.word	0x20000fcc
 80055e4:	20000af4 	.word	0x20000af4
 80055e8:	20000af0 	.word	0x20000af0
 80055ec:	20000fd8 	.word	0x20000fd8

080055f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <vTaskInternalSetTimeOutState+0x24>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <vTaskInternalSetTimeOutState+0x28>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	605a      	str	r2, [r3, #4]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000fdc 	.word	0x20000fdc
 8005618:	20000fc8 	.word	0x20000fc8

0800561c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	613b      	str	r3, [r7, #16]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60fb      	str	r3, [r7, #12]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800565e:	f000 fe45 	bl	80062ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <xTaskCheckForTimeOut+0xbc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800567a:	d102      	bne.n	8005682 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e023      	b.n	80056ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <xTaskCheckForTimeOut+0xc0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d007      	beq.n	800569e <xTaskCheckForTimeOut+0x82>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	429a      	cmp	r2, r3
 8005696:	d302      	bcc.n	800569e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	e015      	b.n	80056ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d20b      	bcs.n	80056c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff9b 	bl	80055f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	e004      	b.n	80056ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ca:	f000 fe3f 	bl	800634c <vPortExitCritical>

	return xReturn;
 80056ce:	69fb      	ldr	r3, [r7, #28]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000fc8 	.word	0x20000fc8
 80056dc:	20000fdc 	.word	0x20000fdc

080056e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <vTaskMissedYield+0x14>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20000fd8 	.word	0x20000fd8

080056f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005700:	f000 f852 	bl	80057a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <prvIdleTask+0x28>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d9f9      	bls.n	8005700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <prvIdleTask+0x2c>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800571c:	e7f0      	b.n	8005700 <prvIdleTask+0x8>
 800571e:	bf00      	nop
 8005720:	20000af4 	.word	0x20000af4
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	e00c      	b.n	800574e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4a12      	ldr	r2, [pc, #72]	; (8005788 <prvInitialiseTaskLists+0x60>)
 8005740:	4413      	add	r3, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fc3e 	bl	8003fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3301      	adds	r3, #1
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b37      	cmp	r3, #55	; 0x37
 8005752:	d9ef      	bls.n	8005734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005754:	480d      	ldr	r0, [pc, #52]	; (800578c <prvInitialiseTaskLists+0x64>)
 8005756:	f7fe fc35 	bl	8003fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800575a:	480d      	ldr	r0, [pc, #52]	; (8005790 <prvInitialiseTaskLists+0x68>)
 800575c:	f7fe fc32 	bl	8003fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005760:	480c      	ldr	r0, [pc, #48]	; (8005794 <prvInitialiseTaskLists+0x6c>)
 8005762:	f7fe fc2f 	bl	8003fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005766:	480c      	ldr	r0, [pc, #48]	; (8005798 <prvInitialiseTaskLists+0x70>)
 8005768:	f7fe fc2c 	bl	8003fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800576c:	480b      	ldr	r0, [pc, #44]	; (800579c <prvInitialiseTaskLists+0x74>)
 800576e:	f7fe fc29 	bl	8003fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005772:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <prvInitialiseTaskLists+0x78>)
 8005774:	4a05      	ldr	r2, [pc, #20]	; (800578c <prvInitialiseTaskLists+0x64>)
 8005776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <prvInitialiseTaskLists+0x7c>)
 800577a:	4a05      	ldr	r2, [pc, #20]	; (8005790 <prvInitialiseTaskLists+0x68>)
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000af4 	.word	0x20000af4
 800578c:	20000f54 	.word	0x20000f54
 8005790:	20000f68 	.word	0x20000f68
 8005794:	20000f84 	.word	0x20000f84
 8005798:	20000f98 	.word	0x20000f98
 800579c:	20000fb0 	.word	0x20000fb0
 80057a0:	20000f7c 	.word	0x20000f7c
 80057a4:	20000f80 	.word	0x20000f80

080057a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ae:	e019      	b.n	80057e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b0:	f000 fd9c 	bl	80062ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057b4:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <prvCheckTasksWaitingTermination+0x50>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fc85 	bl	80040d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <prvCheckTasksWaitingTermination+0x54>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <prvCheckTasksWaitingTermination+0x54>)
 80057ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057da:	f000 fdb7 	bl	800634c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f810 	bl	8005804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e4:	4b06      	ldr	r3, [pc, #24]	; (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e1      	bne.n	80057b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000f98 	.word	0x20000f98
 80057fc:	20000fc4 	.word	0x20000fc4
 8005800:	20000fac 	.word	0x20000fac

08005804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3354      	adds	r3, #84	; 0x54
 8005810:	4618      	mov	r0, r3
 8005812:	f001 f88d 	bl	8006930 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800581c:	2b00      	cmp	r3, #0
 800581e:	d108      	bne.n	8005832 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	4618      	mov	r0, r3
 8005826:	f000 ff25 	bl	8006674 <vPortFree>
				vPortFree( pxTCB );
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 ff22 	bl	8006674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005830:	e018      	b.n	8005864 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005838:	2b01      	cmp	r3, #1
 800583a:	d103      	bne.n	8005844 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 ff19 	bl	8006674 <vPortFree>
	}
 8005842:	e00f      	b.n	8005864 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800584a:	2b02      	cmp	r3, #2
 800584c:	d00a      	beq.n	8005864 <prvDeleteTCB+0x60>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	60fb      	str	r3, [r7, #12]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <prvDeleteTCB+0x5e>
	}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005872:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <prvResetNextTaskUnblockTime+0x40>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <prvResetNextTaskUnblockTime+0x14>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <prvResetNextTaskUnblockTime+0x16>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <prvResetNextTaskUnblockTime+0x44>)
 8005888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800588c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800588e:	e008      	b.n	80058a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <prvResetNextTaskUnblockTime+0x40>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <prvResetNextTaskUnblockTime+0x44>)
 80058a0:	6013      	str	r3, [r2, #0]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	20000f7c 	.word	0x20000f7c
 80058b0:	20000fe4 	.word	0x20000fe4

080058b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058ba:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <xTaskGetSchedulerState+0x34>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058c2:	2301      	movs	r3, #1
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	e008      	b.n	80058da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c8:	4b08      	ldr	r3, [pc, #32]	; (80058ec <xTaskGetSchedulerState+0x38>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058d0:	2302      	movs	r3, #2
 80058d2:	607b      	str	r3, [r7, #4]
 80058d4:	e001      	b.n	80058da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058d6:	2300      	movs	r3, #0
 80058d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058da:	687b      	ldr	r3, [r7, #4]
	}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000fd0 	.word	0x20000fd0
 80058ec:	20000fec 	.word	0x20000fec

080058f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d056      	beq.n	80059b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <xTaskPriorityDisinherit+0xd0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d00a      	beq.n	8005926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60bb      	str	r3, [r7, #8]
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005948:	1e5a      	subs	r2, r3, #1
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005956:	429a      	cmp	r2, r3
 8005958:	d02c      	beq.n	80059b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d128      	bne.n	80059b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3304      	adds	r3, #4
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fbb2 	bl	80040d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <xTaskPriorityDisinherit+0xd4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d903      	bls.n	8005994 <xTaskPriorityDisinherit+0xa4>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <xTaskPriorityDisinherit+0xd4>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <xTaskPriorityDisinherit+0xd8>)
 80059a2:	441a      	add	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fe fb35 	bl	800401a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059b4:	697b      	ldr	r3, [r7, #20]
	}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000af0 	.word	0x20000af0
 80059c4:	20000fcc 	.word	0x20000fcc
 80059c8:	20000af4 	.word	0x20000af4

080059cc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <uxTaskResetEventItemValue+0x2c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <uxTaskResetEventItemValue+0x2c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <uxTaskResetEventItemValue+0x2c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80059e8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80059ea:	687b      	ldr	r3, [r7, #4]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000af0 	.word	0x20000af0

080059fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a06:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a0c:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fb5c 	bl	80040d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a1e:	d10a      	bne.n	8005a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4819      	ldr	r0, [pc, #100]	; (8005a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a30:	f7fe faf3 	bl	800401a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a34:	e026      	b.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a3e:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d209      	bcs.n	8005a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f7fe fb00 	bl	8004060 <vListInsert>
}
 8005a60:	e010      	b.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a62:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe faf6 	bl	8004060 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d202      	bcs.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a7e:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000fc8 	.word	0x20000fc8
 8005a90:	20000af0 	.word	0x20000af0
 8005a94:	20000fb0 	.word	0x20000fb0
 8005a98:	20000f80 	.word	0x20000f80
 8005a9c:	20000f7c 	.word	0x20000f7c
 8005aa0:	20000fe4 	.word	0x20000fe4

08005aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005aae:	f000 facb 	bl	8006048 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ab2:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <xTimerCreateTimerTask+0x80>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d021      	beq.n	8005afe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ac2:	1d3a      	adds	r2, r7, #4
 8005ac4:	f107 0108 	add.w	r1, r7, #8
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe f871 	bl	8003bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	9202      	str	r2, [sp, #8]
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	2302      	movs	r3, #2
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	4910      	ldr	r1, [pc, #64]	; (8005b28 <xTimerCreateTimerTask+0x84>)
 8005ae6:	4811      	ldr	r0, [pc, #68]	; (8005b2c <xTimerCreateTimerTask+0x88>)
 8005ae8:	f7ff f800 	bl	8004aec <xTaskCreateStatic>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4a10      	ldr	r2, [pc, #64]	; (8005b30 <xTimerCreateTimerTask+0x8c>)
 8005af0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005af2:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <xTimerCreateTimerTask+0x8c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	613b      	str	r3, [r7, #16]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b1a:	697b      	ldr	r3, [r7, #20]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20001020 	.word	0x20001020
 8005b28:	08006afc 	.word	0x08006afc
 8005b2c:	08005c51 	.word	0x08005c51
 8005b30:	20001024 	.word	0x20001024

08005b34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	; 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	623b      	str	r3, [r7, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b62:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <xTimerGenericCommand+0x98>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d02a      	beq.n	8005bc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b05      	cmp	r3, #5
 8005b7a:	dc18      	bgt.n	8005bae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b7c:	f7ff fe9a 	bl	80058b4 <xTaskGetSchedulerState>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d109      	bne.n	8005b9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <xTimerGenericCommand+0x98>)
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	f107 0110 	add.w	r1, r7, #16
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	f7fe fbc9 	bl	8004328 <xQueueGenericSend>
 8005b96:	6278      	str	r0, [r7, #36]	; 0x24
 8005b98:	e012      	b.n	8005bc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <xTimerGenericCommand+0x98>)
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f107 0110 	add.w	r1, r7, #16
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f7fe fbbf 	bl	8004328 <xQueueGenericSend>
 8005baa:	6278      	str	r0, [r7, #36]	; 0x24
 8005bac:	e008      	b.n	8005bc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bae:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <xTimerGenericCommand+0x98>)
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	f107 0110 	add.w	r1, r7, #16
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	f7fe fcb3 	bl	8004524 <xQueueGenericSendFromISR>
 8005bbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3728      	adds	r7, #40	; 0x28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20001020 	.word	0x20001020

08005bd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bda:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <prvProcessExpiredTimer+0x7c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fa71 	bl	80040d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d122      	bne.n	8005c3c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	18d1      	adds	r1, r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f000 f8c8 	bl	8005d98 <prvInsertTimerInActiveList>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	2300      	movs	r3, #0
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	2100      	movs	r1, #0
 8005c18:	6978      	ldr	r0, [r7, #20]
 8005c1a:	f7ff ff8b 	bl	8005b34 <xTimerGenericCommand>
 8005c1e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60fb      	str	r3, [r7, #12]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	6978      	ldr	r0, [r7, #20]
 8005c42:	4798      	blx	r3
}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20001018 	.word	0x20001018

08005c50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c58:	f107 0308 	add.w	r3, r7, #8
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 f857 	bl	8005d10 <prvGetNextExpireTime>
 8005c62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4619      	mov	r1, r3
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f803 	bl	8005c74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c6e:	f000 f8d5 	bl	8005e1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c72:	e7f1      	b.n	8005c58 <prvTimerTask+0x8>

08005c74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c7e:	f7ff f989 	bl	8004f94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c82:	f107 0308 	add.w	r3, r7, #8
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f866 	bl	8005d58 <prvSampleTimeNow>
 8005c8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d130      	bne.n	8005cf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <prvProcessTimerOrBlockTask+0x3c>
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d806      	bhi.n	8005cb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ca2:	f7ff f985 	bl	8004fb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff91 	bl	8005bd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cae:	e024      	b.n	8005cfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cb6:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <prvProcessTimerOrBlockTask+0x90>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <prvProcessTimerOrBlockTask+0x94>)
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f7fe fed5 	bl	8004a84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cda:	f7ff f969 	bl	8004fb0 <xTaskResumeAll>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <prvProcessTimerOrBlockTask+0x98>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
}
 8005cf4:	e001      	b.n	8005cfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cf6:	f7ff f95b 	bl	8004fb0 <xTaskResumeAll>
}
 8005cfa:	bf00      	nop
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	2000101c 	.word	0x2000101c
 8005d08:	20001020 	.word	0x20001020
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d18:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <prvGetNextExpireTime+0x44>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d105      	bne.n	8005d42 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <prvGetNextExpireTime+0x44>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e001      	b.n	8005d46 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20001018 	.word	0x20001018

08005d58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d60:	f7ff f9c4 	bl	80050ec <xTaskGetTickCount>
 8005d64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <prvSampleTimeNow+0x3c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d205      	bcs.n	8005d7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d70:	f000 f908 	bl	8005f84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e002      	b.n	8005d82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d82:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <prvSampleTimeNow+0x3c>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20001028 	.word	0x20001028

08005d98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d812      	bhi.n	8005de4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e01b      	b.n	8005e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <prvInsertTimerInActiveList+0x7c>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f7fe f93f 	bl	8004060 <vListInsert>
 8005de2:	e012      	b.n	8005e0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d206      	bcs.n	8005dfa <prvInsertTimerInActiveList+0x62>
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d302      	bcc.n	8005dfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e007      	b.n	8005e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <prvInsertTimerInActiveList+0x80>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7fe f92b 	bl	8004060 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e0a:	697b      	ldr	r3, [r7, #20]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2000101c 	.word	0x2000101c
 8005e18:	20001018 	.word	0x20001018

08005e1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08e      	sub	sp, #56	; 0x38
 8005e20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e22:	e09d      	b.n	8005f60 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da18      	bge.n	8005e5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	61fb      	str	r3, [r7, #28]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e52:	6850      	ldr	r0, [r2, #4]
 8005e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e56:	6892      	ldr	r2, [r2, #8]
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	db7d      	blt.n	8005f5e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe f92c 	bl	80040d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e78:	463b      	mov	r3, r7
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ff6c 	bl	8005d58 <prvSampleTimeNow>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b09      	cmp	r3, #9
 8005e86:	d86b      	bhi.n	8005f60 <prvProcessReceivedCommands+0x144>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <prvProcessReceivedCommands+0x74>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005eb9 	.word	0x08005eb9
 8005e94:	08005eb9 	.word	0x08005eb9
 8005e98:	08005eb9 	.word	0x08005eb9
 8005e9c:	08005f61 	.word	0x08005f61
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f4d 	.word	0x08005f4d
 8005ea8:	08005eb9 	.word	0x08005eb9
 8005eac:	08005eb9 	.word	0x08005eb9
 8005eb0:	08005f61 	.word	0x08005f61
 8005eb4:	08005f15 	.word	0x08005f15
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	18d1      	adds	r1, r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec6:	f7ff ff67 	bl	8005d98 <prvInsertTimerInActiveList>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d047      	beq.n	8005f60 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ed6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d13f      	bne.n	8005f60 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	441a      	add	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2300      	movs	r3, #0
 8005eee:	2100      	movs	r1, #0
 8005ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef2:	f7ff fe1f 	bl	8005b34 <xTimerGenericCommand>
 8005ef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d130      	bne.n	8005f60 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	61bb      	str	r3, [r7, #24]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	617b      	str	r3, [r7, #20]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	18d1      	adds	r1, r2, r3
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f46:	f7ff ff27 	bl	8005d98 <prvInsertTimerInActiveList>
					break;
 8005f4a:	e009      	b.n	8005f60 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f58:	f000 fb8c 	bl	8006674 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f5c:	e000      	b.n	8005f60 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f5e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <prvProcessReceivedCommands+0x164>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1d39      	adds	r1, r7, #4
 8005f66:	2200      	movs	r2, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fe fb73 	bl	8004654 <xQueueReceive>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f af57 	bne.w	8005e24 <prvProcessReceivedCommands+0x8>
	}
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	3730      	adds	r7, #48	; 0x30
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20001020 	.word	0x20001020

08005f84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f8a:	e045      	b.n	8006018 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f8c:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <prvSwitchTimerLists+0xbc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f96:	4b2a      	ldr	r3, [pc, #168]	; (8006040 <prvSwitchTimerLists+0xbc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe f893 	bl	80040d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d12e      	bne.n	8006018 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d90e      	bls.n	8005fea <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <prvSwitchTimerLists+0xbc>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f7fe f83c 	bl	8004060 <vListInsert>
 8005fe8:	e016      	b.n	8006018 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fea:	2300      	movs	r3, #0
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff fd9d 	bl	8005b34 <xTimerGenericCommand>
 8005ffa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	603b      	str	r3, [r7, #0]
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006018:	4b09      	ldr	r3, [pc, #36]	; (8006040 <prvSwitchTimerLists+0xbc>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1b4      	bne.n	8005f8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006022:	4b07      	ldr	r3, [pc, #28]	; (8006040 <prvSwitchTimerLists+0xbc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <prvSwitchTimerLists+0xc0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a04      	ldr	r2, [pc, #16]	; (8006040 <prvSwitchTimerLists+0xbc>)
 800602e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006030:	4a04      	ldr	r2, [pc, #16]	; (8006044 <prvSwitchTimerLists+0xc0>)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6013      	str	r3, [r2, #0]
}
 8006036:	bf00      	nop
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20001018 	.word	0x20001018
 8006044:	2000101c 	.word	0x2000101c

08006048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800604e:	f000 f94d 	bl	80062ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <prvCheckForValidListAndQueue+0x60>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d120      	bne.n	800609c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800605a:	4814      	ldr	r0, [pc, #80]	; (80060ac <prvCheckForValidListAndQueue+0x64>)
 800605c:	f7fd ffb2 	bl	8003fc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006060:	4813      	ldr	r0, [pc, #76]	; (80060b0 <prvCheckForValidListAndQueue+0x68>)
 8006062:	f7fd ffaf 	bl	8003fc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <prvCheckForValidListAndQueue+0x6c>)
 8006068:	4a10      	ldr	r2, [pc, #64]	; (80060ac <prvCheckForValidListAndQueue+0x64>)
 800606a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800606c:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <prvCheckForValidListAndQueue+0x70>)
 800606e:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <prvCheckForValidListAndQueue+0x68>)
 8006070:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006072:	2300      	movs	r3, #0
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <prvCheckForValidListAndQueue+0x74>)
 8006078:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <prvCheckForValidListAndQueue+0x78>)
 800607a:	2110      	movs	r1, #16
 800607c:	200a      	movs	r0, #10
 800607e:	f7fe f8b9 	bl	80041f4 <xQueueGenericCreateStatic>
 8006082:	4603      	mov	r3, r0
 8006084:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <prvCheckForValidListAndQueue+0x60>)
 8006086:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006088:	4b07      	ldr	r3, [pc, #28]	; (80060a8 <prvCheckForValidListAndQueue+0x60>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <prvCheckForValidListAndQueue+0x60>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	490b      	ldr	r1, [pc, #44]	; (80060c4 <prvCheckForValidListAndQueue+0x7c>)
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe fccc 	bl	8004a34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800609c:	f000 f956 	bl	800634c <vPortExitCritical>
}
 80060a0:	bf00      	nop
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20001020 	.word	0x20001020
 80060ac:	20000ff0 	.word	0x20000ff0
 80060b0:	20001004 	.word	0x20001004
 80060b4:	20001018 	.word	0x20001018
 80060b8:	2000101c 	.word	0x2000101c
 80060bc:	200010cc 	.word	0x200010cc
 80060c0:	2000102c 	.word	0x2000102c
 80060c4:	08006b04 	.word	0x08006b04

080060c8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80060d6:	f06f 0301 	mvn.w	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <xTimerPendFunctionCallFromISR+0x3c>)
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	f107 0114 	add.w	r1, r7, #20
 80060f0:	2300      	movs	r3, #0
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	f7fe fa16 	bl	8004524 <xQueueGenericSendFromISR>
 80060f8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3728      	adds	r7, #40	; 0x28
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20001020 	.word	0x20001020

08006108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3b04      	subs	r3, #4
 8006118:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b04      	subs	r3, #4
 8006126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3b04      	subs	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006138:	4a08      	ldr	r2, [pc, #32]	; (800615c <pxPortInitialiseStack+0x54>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3b14      	subs	r3, #20
 8006142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b20      	subs	r3, #32
 800614e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	08006161 	.word	0x08006161

08006160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006166:	2300      	movs	r3, #0
 8006168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <prvTaskExitError+0x54>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006172:	d00a      	beq.n	800618a <prvTaskExitError+0x2a>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <prvTaskExitError+0x28>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	60bb      	str	r3, [r7, #8]
}
 800619c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800619e:	bf00      	nop
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0fc      	beq.n	80061a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	2000000c 	.word	0x2000000c
	...

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	f04e 0e0d 	orr.w	lr, lr, #13
 80061de:	4770      	bx	lr

080061e0 <pxCurrentTCBConst2>:
 80061e0:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061e8:	4806      	ldr	r0, [pc, #24]	; (8006204 <prvPortStartFirstTask+0x1c>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	b662      	cpsie	i
 80061f4:	b661      	cpsie	f
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	df00      	svc	0
 8006200:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006202:	bf00      	nop
 8006204:	e000ed08 	.word	0xe000ed08

08006208 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800620e:	4b32      	ldr	r3, [pc, #200]	; (80062d8 <xPortStartScheduler+0xd0>)
 8006210:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <xPortStartScheduler+0xd4>)
 8006234:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006236:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <xPortStartScheduler+0xd8>)
 8006238:	2207      	movs	r2, #7
 800623a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800623c:	e009      	b.n	8006252 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800623e:	4b28      	ldr	r3, [pc, #160]	; (80062e0 <xPortStartScheduler+0xd8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	4a26      	ldr	r2, [pc, #152]	; (80062e0 <xPortStartScheduler+0xd8>)
 8006246:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d0ef      	beq.n	800623e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <xPortStartScheduler+0xd8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1c3 0307 	rsb	r3, r3, #7
 8006266:	2b04      	cmp	r3, #4
 8006268:	d00a      	beq.n	8006280 <xPortStartScheduler+0x78>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60bb      	str	r3, [r7, #8]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <xPortStartScheduler+0xd8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <xPortStartScheduler+0xd8>)
 8006288:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800628a:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <xPortStartScheduler+0xd8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006292:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <xPortStartScheduler+0xd8>)
 8006294:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <xPortStartScheduler+0xdc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a10      	ldr	r2, [pc, #64]	; (80062e4 <xPortStartScheduler+0xdc>)
 80062a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062aa:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <xPortStartScheduler+0xdc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a0d      	ldr	r2, [pc, #52]	; (80062e4 <xPortStartScheduler+0xdc>)
 80062b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062b6:	f000 f8b9 	bl	800642c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <xPortStartScheduler+0xe0>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062c0:	f7ff ff92 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062c4:	f7fe ffde 	bl	8005284 <vTaskSwitchContext>
	prvTaskExitError();
 80062c8:	f7ff ff4a 	bl	8006160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	e000e400 	.word	0xe000e400
 80062dc:	2000111c 	.word	0x2000111c
 80062e0:	20001120 	.word	0x20001120
 80062e4:	e000ed20 	.word	0xe000ed20
 80062e8:	2000000c 	.word	0x2000000c

080062ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	607b      	str	r3, [r7, #4]
}
 8006304:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <vPortEnterCritical+0x58>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	4a0d      	ldr	r2, [pc, #52]	; (8006344 <vPortEnterCritical+0x58>)
 800630e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <vPortEnterCritical+0x58>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d10f      	bne.n	8006338 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <vPortEnterCritical+0x5c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <vPortEnterCritical+0x4c>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	603b      	str	r3, [r7, #0]
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <vPortEnterCritical+0x4a>
	}
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	2000000c 	.word	0x2000000c
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006352:	4b11      	ldr	r3, [pc, #68]	; (8006398 <vPortExitCritical+0x4c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <vPortExitCritical+0x24>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	607b      	str	r3, [r7, #4]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006370:	4b09      	ldr	r3, [pc, #36]	; (8006398 <vPortExitCritical+0x4c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	4a08      	ldr	r2, [pc, #32]	; (8006398 <vPortExitCritical+0x4c>)
 8006378:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <vPortExitCritical+0x4c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d105      	bne.n	800638e <vPortExitCritical+0x42>
 8006382:	2300      	movs	r3, #0
 8006384:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f383 8811 	msr	BASEPRI, r3
}
 800638c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr
 8006398:	2000000c 	.word	0x2000000c
 800639c:	00000000 	.word	0x00000000

080063a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063a0:	f3ef 8009 	mrs	r0, PSP
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <pxCurrentTCBConst>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063b0:	6010      	str	r0, [r2, #0]
 80063b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80063b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063ba:	f380 8811 	msr	BASEPRI, r0
 80063be:	f7fe ff61 	bl	8005284 <vTaskSwitchContext>
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8811 	msr	BASEPRI, r0
 80063ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	6808      	ldr	r0, [r1, #0]
 80063d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063d6:	f380 8809 	msr	PSP, r0
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	4770      	bx	lr

080063e0 <pxCurrentTCBConst>:
 80063e0:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006402:	f7fe fe81 	bl	8005108 <xTaskIncrementTick>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <xPortSysTickHandler+0x40>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <vPortSetupTimerInterrupt+0x30>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <vPortSetupTimerInterrupt+0x38>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a09      	ldr	r2, [pc, #36]	; (8006468 <vPortSetupTimerInterrupt+0x3c>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <vPortSetupTimerInterrupt+0x40>)
 800644a:	3b01      	subs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644e:	4b03      	ldr	r3, [pc, #12]	; (800645c <vPortSetupTimerInterrupt+0x30>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr
 800645c:	e000e010 	.word	0xe000e010
 8006460:	e000e018 	.word	0xe000e018
 8006464:	20000000 	.word	0x20000000
 8006468:	10624dd3 	.word	0x10624dd3
 800646c:	e000e014 	.word	0xe000e014

08006470 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006476:	f3ef 8305 	mrs	r3, IPSR
 800647a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b0f      	cmp	r3, #15
 8006480:	d914      	bls.n	80064ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006482:	4a16      	ldr	r2, [pc, #88]	; (80064dc <vPortValidateInterruptPriority+0x6c>)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800648c:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <vPortValidateInterruptPriority+0x70>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	7afa      	ldrb	r2, [r7, #11]
 8006492:	429a      	cmp	r2, r3
 8006494:	d20a      	bcs.n	80064ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	607b      	str	r3, [r7, #4]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064ac:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <vPortValidateInterruptPriority+0x74>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <vPortValidateInterruptPriority+0x78>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d90a      	bls.n	80064d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	603b      	str	r3, [r7, #0]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <vPortValidateInterruptPriority+0x60>
	}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr
 80064dc:	e000e3f0 	.word	0xe000e3f0
 80064e0:	2000111c 	.word	0x2000111c
 80064e4:	e000ed0c 	.word	0xe000ed0c
 80064e8:	20001120 	.word	0x20001120

080064ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08a      	sub	sp, #40	; 0x28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064f8:	f7fe fd4c 	bl	8004f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064fc:	4b58      	ldr	r3, [pc, #352]	; (8006660 <pvPortMalloc+0x174>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006504:	f000 f910 	bl	8006728 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006508:	4b56      	ldr	r3, [pc, #344]	; (8006664 <pvPortMalloc+0x178>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 808e 	bne.w	8006632 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01d      	beq.n	8006558 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800651c:	2208      	movs	r2, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d014      	beq.n	8006558 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f023 0307 	bic.w	r3, r3, #7
 8006534:	3308      	adds	r3, #8
 8006536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <pvPortMalloc+0x6c>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	617b      	str	r3, [r7, #20]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d069      	beq.n	8006632 <pvPortMalloc+0x146>
 800655e:	4b42      	ldr	r3, [pc, #264]	; (8006668 <pvPortMalloc+0x17c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	429a      	cmp	r2, r3
 8006566:	d864      	bhi.n	8006632 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006568:	4b40      	ldr	r3, [pc, #256]	; (800666c <pvPortMalloc+0x180>)
 800656a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800656c:	4b3f      	ldr	r3, [pc, #252]	; (800666c <pvPortMalloc+0x180>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006572:	e004      	b.n	800657e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d903      	bls.n	8006590 <pvPortMalloc+0xa4>
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1f1      	bne.n	8006574 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006590:	4b33      	ldr	r3, [pc, #204]	; (8006660 <pvPortMalloc+0x174>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006596:	429a      	cmp	r2, r3
 8006598:	d04b      	beq.n	8006632 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2208      	movs	r2, #8
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	2308      	movs	r3, #8
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d91f      	bls.n	80065fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4413      	add	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <pvPortMalloc+0xf8>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	613b      	str	r3, [r7, #16]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	1ad2      	subs	r2, r2, r3
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065f6:	69b8      	ldr	r0, [r7, #24]
 80065f8:	f000 f8f8 	bl	80067ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065fc:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <pvPortMalloc+0x17c>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	4a18      	ldr	r2, [pc, #96]	; (8006668 <pvPortMalloc+0x17c>)
 8006608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800660a:	4b17      	ldr	r3, [pc, #92]	; (8006668 <pvPortMalloc+0x17c>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4b18      	ldr	r3, [pc, #96]	; (8006670 <pvPortMalloc+0x184>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d203      	bcs.n	800661e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <pvPortMalloc+0x17c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a15      	ldr	r2, [pc, #84]	; (8006670 <pvPortMalloc+0x184>)
 800661c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <pvPortMalloc+0x178>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	431a      	orrs	r2, r3
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006632:	f7fe fcbd 	bl	8004fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <pvPortMalloc+0x16a>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <pvPortMalloc+0x168>
	return pvReturn;
 8006656:	69fb      	ldr	r3, [r7, #28]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3728      	adds	r7, #40	; 0x28
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20001d2c 	.word	0x20001d2c
 8006664:	20001d38 	.word	0x20001d38
 8006668:	20001d30 	.word	0x20001d30
 800666c:	20001d24 	.word	0x20001d24
 8006670:	20001d34 	.word	0x20001d34

08006674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d048      	beq.n	8006718 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006686:	2308      	movs	r3, #8
 8006688:	425b      	negs	r3, r3
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4413      	add	r3, r2
 800668e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	4b21      	ldr	r3, [pc, #132]	; (8006720 <vPortFree+0xac>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4013      	ands	r3, r2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <vPortFree+0x44>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60fb      	str	r3, [r7, #12]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <vPortFree+0x62>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	60bb      	str	r3, [r7, #8]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <vPortFree+0xac>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d019      	beq.n	8006718 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortFree+0xac>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	43db      	mvns	r3, r3
 80066f6:	401a      	ands	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066fc:	f7fe fc4a 	bl	8004f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <vPortFree+0xb0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4413      	add	r3, r2
 800670a:	4a06      	ldr	r2, [pc, #24]	; (8006724 <vPortFree+0xb0>)
 800670c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f000 f86c 	bl	80067ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006714:	f7fe fc4c 	bl	8004fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20001d38 	.word	0x20001d38
 8006724:	20001d30 	.word	0x20001d30

08006728 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800672e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006732:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006734:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <prvHeapInit+0xac>)
 8006736:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3307      	adds	r3, #7
 8006746:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0307 	bic.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <prvHeapInit+0xac>)
 8006758:	4413      	add	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006760:	4a1d      	ldr	r2, [pc, #116]	; (80067d8 <prvHeapInit+0xb0>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <prvHeapInit+0xb0>)
 8006768:	2200      	movs	r2, #0
 800676a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4413      	add	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006774:	2208      	movs	r2, #8
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0307 	bic.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a15      	ldr	r2, [pc, #84]	; (80067dc <prvHeapInit+0xb4>)
 8006788:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800678a:	4b14      	ldr	r3, [pc, #80]	; (80067dc <prvHeapInit+0xb4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006792:	4b12      	ldr	r3, [pc, #72]	; (80067dc <prvHeapInit+0xb4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <prvHeapInit+0xb4>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <prvHeapInit+0xb8>)
 80067b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <prvHeapInit+0xbc>)
 80067be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <prvHeapInit+0xc0>)
 80067c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20001124 	.word	0x20001124
 80067d8:	20001d24 	.word	0x20001d24
 80067dc:	20001d2c 	.word	0x20001d2c
 80067e0:	20001d34 	.word	0x20001d34
 80067e4:	20001d30 	.word	0x20001d30
 80067e8:	20001d38 	.word	0x20001d38

080067ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067f4:	4b27      	ldr	r3, [pc, #156]	; (8006894 <prvInsertBlockIntoFreeList+0xa8>)
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e002      	b.n	8006800 <prvInsertBlockIntoFreeList+0x14>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	d8f7      	bhi.n	80067fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4413      	add	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d108      	bne.n	800682e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d118      	bne.n	8006874 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <prvInsertBlockIntoFreeList+0xac>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d00d      	beq.n	800686a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e008      	b.n	800687c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <prvInsertBlockIntoFreeList+0xac>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e003      	b.n	800687c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d002      	beq.n	800688a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr
 8006894:	20001d24 	.word	0x20001d24
 8006898:	20001d2c 	.word	0x20001d2c

0800689c <__libc_init_array>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	2600      	movs	r6, #0
 80068a0:	4d0c      	ldr	r5, [pc, #48]	; (80068d4 <__libc_init_array+0x38>)
 80068a2:	4c0d      	ldr	r4, [pc, #52]	; (80068d8 <__libc_init_array+0x3c>)
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	42a6      	cmp	r6, r4
 80068aa:	d109      	bne.n	80068c0 <__libc_init_array+0x24>
 80068ac:	f000 f8f0 	bl	8006a90 <_init>
 80068b0:	2600      	movs	r6, #0
 80068b2:	4d0a      	ldr	r5, [pc, #40]	; (80068dc <__libc_init_array+0x40>)
 80068b4:	4c0a      	ldr	r4, [pc, #40]	; (80068e0 <__libc_init_array+0x44>)
 80068b6:	1b64      	subs	r4, r4, r5
 80068b8:	10a4      	asrs	r4, r4, #2
 80068ba:	42a6      	cmp	r6, r4
 80068bc:	d105      	bne.n	80068ca <__libc_init_array+0x2e>
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c4:	4798      	blx	r3
 80068c6:	3601      	adds	r6, #1
 80068c8:	e7ee      	b.n	80068a8 <__libc_init_array+0xc>
 80068ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ce:	4798      	blx	r3
 80068d0:	3601      	adds	r6, #1
 80068d2:	e7f2      	b.n	80068ba <__libc_init_array+0x1e>
 80068d4:	08006c44 	.word	0x08006c44
 80068d8:	08006c44 	.word	0x08006c44
 80068dc:	08006c44 	.word	0x08006c44
 80068e0:	08006c48 	.word	0x08006c48

080068e4 <__retarget_lock_acquire_recursive>:
 80068e4:	4770      	bx	lr

080068e6 <__retarget_lock_release_recursive>:
 80068e6:	4770      	bx	lr

080068e8 <memcpy>:
 80068e8:	440a      	add	r2, r1
 80068ea:	4291      	cmp	r1, r2
 80068ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80068f0:	d100      	bne.n	80068f4 <memcpy+0xc>
 80068f2:	4770      	bx	lr
 80068f4:	b510      	push	{r4, lr}
 80068f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fa:	4291      	cmp	r1, r2
 80068fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006900:	d1f9      	bne.n	80068f6 <memcpy+0xe>
 8006902:	bd10      	pop	{r4, pc}

08006904 <memset>:
 8006904:	4603      	mov	r3, r0
 8006906:	4402      	add	r2, r0
 8006908:	4293      	cmp	r3, r2
 800690a:	d100      	bne.n	800690e <memset+0xa>
 800690c:	4770      	bx	lr
 800690e:	f803 1b01 	strb.w	r1, [r3], #1
 8006912:	e7f9      	b.n	8006908 <memset+0x4>

08006914 <cleanup_glue>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	6809      	ldr	r1, [r1, #0]
 800691a:	4605      	mov	r5, r0
 800691c:	b109      	cbz	r1, 8006922 <cleanup_glue+0xe>
 800691e:	f7ff fff9 	bl	8006914 <cleanup_glue>
 8006922:	4621      	mov	r1, r4
 8006924:	4628      	mov	r0, r5
 8006926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692a:	f000 b869 	b.w	8006a00 <_free_r>
	...

08006930 <_reclaim_reent>:
 8006930:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <_reclaim_reent+0xb4>)
 8006932:	b570      	push	{r4, r5, r6, lr}
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4604      	mov	r4, r0
 8006938:	4283      	cmp	r3, r0
 800693a:	d051      	beq.n	80069e0 <_reclaim_reent+0xb0>
 800693c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800693e:	b143      	cbz	r3, 8006952 <_reclaim_reent+0x22>
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d14a      	bne.n	80069dc <_reclaim_reent+0xac>
 8006946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006948:	6819      	ldr	r1, [r3, #0]
 800694a:	b111      	cbz	r1, 8006952 <_reclaim_reent+0x22>
 800694c:	4620      	mov	r0, r4
 800694e:	f000 f857 	bl	8006a00 <_free_r>
 8006952:	6961      	ldr	r1, [r4, #20]
 8006954:	b111      	cbz	r1, 800695c <_reclaim_reent+0x2c>
 8006956:	4620      	mov	r0, r4
 8006958:	f000 f852 	bl	8006a00 <_free_r>
 800695c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800695e:	b111      	cbz	r1, 8006966 <_reclaim_reent+0x36>
 8006960:	4620      	mov	r0, r4
 8006962:	f000 f84d 	bl	8006a00 <_free_r>
 8006966:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006968:	b111      	cbz	r1, 8006970 <_reclaim_reent+0x40>
 800696a:	4620      	mov	r0, r4
 800696c:	f000 f848 	bl	8006a00 <_free_r>
 8006970:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006972:	b111      	cbz	r1, 800697a <_reclaim_reent+0x4a>
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f843 	bl	8006a00 <_free_r>
 800697a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800697c:	b111      	cbz	r1, 8006984 <_reclaim_reent+0x54>
 800697e:	4620      	mov	r0, r4
 8006980:	f000 f83e 	bl	8006a00 <_free_r>
 8006984:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006986:	b111      	cbz	r1, 800698e <_reclaim_reent+0x5e>
 8006988:	4620      	mov	r0, r4
 800698a:	f000 f839 	bl	8006a00 <_free_r>
 800698e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006990:	b111      	cbz	r1, 8006998 <_reclaim_reent+0x68>
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f834 	bl	8006a00 <_free_r>
 8006998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699a:	b111      	cbz	r1, 80069a2 <_reclaim_reent+0x72>
 800699c:	4620      	mov	r0, r4
 800699e:	f000 f82f 	bl	8006a00 <_free_r>
 80069a2:	69a3      	ldr	r3, [r4, #24]
 80069a4:	b1e3      	cbz	r3, 80069e0 <_reclaim_reent+0xb0>
 80069a6:	4620      	mov	r0, r4
 80069a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069aa:	4798      	blx	r3
 80069ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069ae:	b1b9      	cbz	r1, 80069e0 <_reclaim_reent+0xb0>
 80069b0:	4620      	mov	r0, r4
 80069b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069b6:	f7ff bfad 	b.w	8006914 <cleanup_glue>
 80069ba:	5949      	ldr	r1, [r1, r5]
 80069bc:	b941      	cbnz	r1, 80069d0 <_reclaim_reent+0xa0>
 80069be:	3504      	adds	r5, #4
 80069c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c2:	2d80      	cmp	r5, #128	; 0x80
 80069c4:	68d9      	ldr	r1, [r3, #12]
 80069c6:	d1f8      	bne.n	80069ba <_reclaim_reent+0x8a>
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 f819 	bl	8006a00 <_free_r>
 80069ce:	e7ba      	b.n	8006946 <_reclaim_reent+0x16>
 80069d0:	680e      	ldr	r6, [r1, #0]
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 f814 	bl	8006a00 <_free_r>
 80069d8:	4631      	mov	r1, r6
 80069da:	e7ef      	b.n	80069bc <_reclaim_reent+0x8c>
 80069dc:	2500      	movs	r5, #0
 80069de:	e7ef      	b.n	80069c0 <_reclaim_reent+0x90>
 80069e0:	bd70      	pop	{r4, r5, r6, pc}
 80069e2:	bf00      	nop
 80069e4:	20000010 	.word	0x20000010

080069e8 <__malloc_lock>:
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <__malloc_lock+0x8>)
 80069ea:	f7ff bf7b 	b.w	80068e4 <__retarget_lock_acquire_recursive>
 80069ee:	bf00      	nop
 80069f0:	20001d3c 	.word	0x20001d3c

080069f4 <__malloc_unlock>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__malloc_unlock+0x8>)
 80069f6:	f7ff bf76 	b.w	80068e6 <__retarget_lock_release_recursive>
 80069fa:	bf00      	nop
 80069fc:	20001d3c 	.word	0x20001d3c

08006a00 <_free_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d040      	beq.n	8006a8a <_free_r+0x8a>
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f0c      	subs	r4, r1, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfb8      	it	lt
 8006a12:	18e4      	addlt	r4, r4, r3
 8006a14:	f7ff ffe8 	bl	80069e8 <__malloc_lock>
 8006a18:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <_free_r+0x8c>)
 8006a1a:	6813      	ldr	r3, [r2, #0]
 8006a1c:	b933      	cbnz	r3, 8006a2c <_free_r+0x2c>
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	6014      	str	r4, [r2, #0]
 8006a22:	4628      	mov	r0, r5
 8006a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a28:	f7ff bfe4 	b.w	80069f4 <__malloc_unlock>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d908      	bls.n	8006a42 <_free_r+0x42>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	1821      	adds	r1, r4, r0
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf01      	itttt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	1809      	addeq	r1, r1, r0
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	e7ed      	b.n	8006a1e <_free_r+0x1e>
 8006a42:	461a      	mov	r2, r3
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b10b      	cbz	r3, 8006a4c <_free_r+0x4c>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x42>
 8006a4c:	6811      	ldr	r1, [r2, #0]
 8006a4e:	1850      	adds	r0, r2, r1
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x6c>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	4401      	add	r1, r0
 8006a58:	1850      	adds	r0, r2, r1
 8006a5a:	4283      	cmp	r3, r0
 8006a5c:	6011      	str	r1, [r2, #0]
 8006a5e:	d1e0      	bne.n	8006a22 <_free_r+0x22>
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4401      	add	r1, r0
 8006a66:	6011      	str	r1, [r2, #0]
 8006a68:	6053      	str	r3, [r2, #4]
 8006a6a:	e7da      	b.n	8006a22 <_free_r+0x22>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x74>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	e7d6      	b.n	8006a22 <_free_r+0x22>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	1821      	adds	r1, r4, r0
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf01      	itttt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6063      	str	r3, [r4, #4]
 8006a86:	6054      	str	r4, [r2, #4]
 8006a88:	e7cb      	b.n	8006a22 <_free_r+0x22>
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20001d40 	.word	0x20001d40

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
